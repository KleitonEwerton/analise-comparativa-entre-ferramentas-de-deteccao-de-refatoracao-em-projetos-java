Hash,Refatoração,Descrição
eb6b3c4ff2094b9f22523482031f81276e0a892d,MOVE, MOVE	{Method main(String[]) at GraphTheory2/SteinerTree.java:121}	{Method main(String[]) at GraphTheory/SteinerTree.java:121}) MOVE({SteinerTree main(String[])}  {SteinerTree main(String[])}),
2c72e1beca70d41d9949df88fb780a1e8284c03d,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java:160}	{Method simpleIsomorphismTest() at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java:167}) EXTRACT({com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism main(String[])}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism simpleIsomorphismTest()}),
3410864adb184adc921eda4e194bd8721082ebe1,RENAME, RENAME	{Method tsp(double[][]  int) at GraphTheory/TspDynamicProgramming.java:59}	{Method solve() at GraphTheory/TspDynamicProgramming.java:63}) RENAME({TspDynamicProgramming tsp(double[][]  int)}  {TspDynamicProgramming solve()}),
3410864adb184adc921eda4e194bd8721082ebe1,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method tsp(int  int  double[][]  Double[][]  Integer[][]  int) at GraphTheory/TspDynamicProgramming.java:81}	{Method tsp(int  int  Double[][]  Integer[][]) at GraphTheory/TspDynamicProgramming.java:85}) CHANGE_SIGNATURE({TspDynamicProgramming tsp(int  int  double[][]  Double[][]  Integer[][]  int)}  {TspDynamicProgramming tsp(int  int  Double[][]  Integer[][])}),
e89dbe6e0119b71d98d8c59ca034932ec4f15194,EXTRACT, EXTRACT	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/dp/CoinChange.java:109}	{Method example3() at src/main/java/com/williamfiset/algorithms/dp/CoinChange.java:167}) EXTRACT({com.williamfiset.algorithms.dp.CoinChange main(String[])}  {com.williamfiset.algorithms.dp.CoinChange example3()}),
46ef34d669197a67d530a28bc81eed0ba26401a9,RENAME, RENAME	{Class FordFulkersonDFSAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyList.java:14}	{Class FordFulkersonDfsSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:15}) RENAME({com.williamfiset.algorithms.graphtheory.FordFulkersonDFSAdjacencyList}  {com.williamfiset.algorithms.graphtheory.FordFulkersonDfsSolverAdjacencyList}),
46ef34d669197a67d530a28bc81eed0ba26401a9,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method addEdge(List[]  int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyList.java:37}	{Method addEdge(List  int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:126}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.FordFulkersonDFSAdjacencyList addEdge(List[]  int  int  int)}  {com.williamfiset.algorithms.graphtheory.FordFulkersonDfsSolverAdjacencyList addEdge(List  int  int  int)}),
46ef34d669197a67d530a28bc81eed0ba26401a9,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dfs(List[]  int[]  int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyList.java:81}	{Method dfs(int  int) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:87}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.FordFulkersonDFSAdjacencyList dfs(List[]  int[]  int  int  int)}  {com.williamfiset.algorithms.graphtheory.FordFulkersonDfsSolverAdjacencyList dfs(int  int)}),
68924d7c5c241530bb9eb2878b8086d7ecf1c05e,MOVE, MOVE	{Method eulerianPath(Edge[]  int) at GraphTheory/EulerianPathDirectedEdgesAdjacencyList.java:23}	{Method eulerianPath(List) at GraphTheory/EulerianPathDirectedEdgesAdjacencyList.java:37}) MOVE({EulerianPathDirectedEdgesEdgeList eulerianPath(Edge[]  int)}  {EulerianPathDirectedEdgesAdjacencyList eulerianPath(List)}),
8c5c65b166ca749c6b49ca9f7ed2c27dc02d7a7c,RENAME, RENAME	{Method eulerianPath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:38}	{Method getEulerianPath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:27}) RENAME({com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList eulerianPath()}  {com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList getEulerianPath()}),
8c5c65b166ca749c6b49ca9f7ed2c27dc02d7a7c,MOVE_RENAME, MOVE_RENAME	{Method testMoreComplexPath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:130}	{Method testSomewhatComplexPath() at javatests/com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyListTest.java:159}) MOVE_RENAME({com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList testMoreComplexPath()}  {javatests.com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyListTest testSomewhatComplexPath()}),
ffeb01e489f02c69676501074af2b805f976a1f5,RENAME, RENAME	{Class MinCostMaxFlowWithNegativeCosts at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowWithNegativeCosts.java:13}	{Class MinCostMaxFlowWithBellmanFord at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowWithBellmanFord.java:13}) RENAME({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowWithNegativeCosts}  {com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowWithBellmanFord}),
b65c706e860f1ce2f7850744498969a0a3759a1c,MOVE, MOVE	{Class EdmondsKarpAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:15}	{Class EdmondsKarpAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:15}) MOVE({com.williamfiset.algorithms.graphtheory.EdmondsKarpAdjacencyList}  {com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyList}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method getGraph() at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:74}	{Method getGraph() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:72}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList getGraph()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase getGraph()}),
0e291a44878a996bfc511cc71641b2e7bb842735,EXTRACT_SUPER, EXTRACT_SUPER	{Class CapacityScalingSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:16}	{Class NetworkFlowBase at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:11}) EXTRACT_SUPER({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:151}	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:51}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList initializeGraph()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase initializeGraph()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP_SIGNATURE, PULL_UP_SIGNATURE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:100}	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:98}) PULL_UP_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase solve()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:154}	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:51}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList initializeGraph()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase initializeGraph()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method getGraph() at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:78}	{Method getGraph() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:72}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.Dinics getGraph()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase getGraph()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method getMinCut() at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:92}	{Method getMinCut() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:92}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList getMinCut()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase getMinCut()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method getMinCut() at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:93}	{Method getMinCut() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:92}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList getMinCut()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase getMinCut()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method addEdge(int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:62}	{Method addEdge(int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:56}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.Dinics addEdge(int  int  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase addEdge(int  int  int)}),
0e291a44878a996bfc511cc71641b2e7bb842735,EXTRACT_SUPER, EXTRACT_SUPER	{Class Dinics at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:16}	{Class NetworkFlowBase at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:11}) EXTRACT_SUPER({com.williamfiset.algorithms.graphtheory.networkflow.Dinics}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method addEdge(int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:56}	{Method addEdge(int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:56}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList addEdge(int  int  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase addEdge(int  int  int)}),
0e291a44878a996bfc511cc71641b2e7bb842735,EXTRACT_SUPER, EXTRACT_SUPER	{Class FordFulkersonDfsSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:15}	{Class NetworkFlowBase at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:11}) EXTRACT_SUPER({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method getMinCut() at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:92}	{Method getMinCut() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:92}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.Dinics getMinCut()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase getMinCut()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP_SIGNATURE, PULL_UP_SIGNATURE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:100}	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:98}) PULL_UP_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase solve()}),
0e291a44878a996bfc511cc71641b2e7bb842735,MOVE, MOVE	{Class Edge at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:32}	{Class Edge at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:15}) MOVE({com.williamfiset.algorithms.graphtheory.networkflow.Dinics Edge}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase Edge}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method getGraph() at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:72}	{Method getGraph() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:72}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList getGraph()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase getGraph()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method getMaxFlow() at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:84}	{Method getMaxFlow() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:84}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.Dinics getMaxFlow()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase getMaxFlow()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP_SIGNATURE, PULL_UP_SIGNATURE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:137}	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:98}) PULL_UP_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.Dinics solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase solve()}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:57}	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:51}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.Dinics initializeGraph()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase initializeGraph()}),
0e291a44878a996bfc511cc71641b2e7bb842735,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dfs(int  int) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:123}	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:56}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList dfs(int  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList dfs(int  long)}),
0e291a44878a996bfc511cc71641b2e7bb842735,PULL_UP, PULL_UP	{Method getMaxFlow() at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:84}	{Method getMaxFlow() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:84}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList getMaxFlow()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase getMaxFlow()}),
b247b06b04ed258b2961146c1af4394f2d41dbf7,RENAME, RENAME	{Method shortestPathDAG(Double[][]  int  int) at GraphTheory/TopologicalSortAdjacencyMatrix.java:52}	{Method dagShortestPath(Double[][]  int) at GraphTheory/TopologicalSortAdjacencyMatrix.java:53}) RENAME({TopologicalSortAdjacencyMatrix shortestPathDAG(Double[][]  int  int)}  {TopologicalSortAdjacencyMatrix dagShortestPath(Double[][]  int)}),
91998a3042f0591e4fd297a0c34ca76e44eabb89,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method assertNullChildren(RedBlackTree.Node[]) at src/test/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTreeTest.java:295}	{Method assertNullChildren(RedBlackTree  RedBlackTree.Node[]) at src/test/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTreeTest.java:318}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.balancedtree.RedBlackTreeTest assertNullChildren(RedBlackTree.Node[])}  {com.williamfiset.algorithms.datastructures.balancedtree.RedBlackTreeTest assertNullChildren(RedBlackTree  RedBlackTree.Node[])}),
91998a3042f0591e4fd297a0c34ca76e44eabb89,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method assertCorrectParentLinks(RedBlackTree.Node  RedBlackTree.Node) at src/test/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTreeTest.java:302}	{Method assertCorrectParentLinks(RedBlackTree  RedBlackTree.Node  RedBlackTree.Node) at src/test/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTreeTest.java:325}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.balancedtree.RedBlackTreeTest assertCorrectParentLinks(RedBlackTree.Node  RedBlackTree.Node)}  {com.williamfiset.algorithms.datastructures.balancedtree.RedBlackTreeTest assertCorrectParentLinks(RedBlackTree  RedBlackTree.Node  RedBlackTree.Node)}),
91998a3042f0591e4fd297a0c34ca76e44eabb89,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method assertBinarySearchTreeInvariant(RedBlackTree.Node) at src/test/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTreeTest.java:312}	{Method assertBinarySearchTreeInvariant(RedBlackTree  RedBlackTree.Node) at src/test/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTreeTest.java:340}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.balancedtree.RedBlackTreeTest assertBinarySearchTreeInvariant(RedBlackTree.Node)}  {com.williamfiset.algorithms.datastructures.balancedtree.RedBlackTreeTest assertBinarySearchTreeInvariant(RedBlackTree  RedBlackTree.Node)}),
408c331e2faef75e23be1ba40bcaddba25c1248c,RENAME, RENAME	{Class FibonacciHeapTestCase at src/test/java/com/williamfiset/algorithms/datastructures/fibonacciheap/FibonacciHeapTestCase.java:24}	{Class FibonacciHeapTest at src/test/java/com/williamfiset/algorithms/datastructures/fibonacciheap/FibonacciHeapTest.java:21}) RENAME({com.williamfiset.algorithms.datastructures.fibonacciheap.FibonacciHeapTestCase}  {com.williamfiset.algorithms.datastructures.fibonacciheap.FibonacciHeapTest}),
21a3ea1f9dafffc64eddec389983a98f3c400519,RENAME, RENAME	{Method mst() at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:49}	{Method getMstCost() at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:56}) RENAME({com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList mst()}  {com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList getMstCost()}),
3f4e6474bdb8ab2e4eb5732223d567925e017000,RENAME, RENAME	{Class TravelingSalesmanProblemBruteForce at GraphTheory/TravelingSalesmanProblemBruteForce.java:1}	{Class TspBruteForce at GraphTheory/TspBruteForce.java:1}) RENAME({TravelingSalesmanProblemBruteForce}  {TspBruteForce}),
3f4e6474bdb8ab2e4eb5732223d567925e017000,MOVE, MOVE	{Method tourCost(List  double[][]) at GraphTheory/TravelingSalesmanProblemDynamicProgramming.java:135}	{Method tourCost(List  double[][]) at GraphTheory/TspDynamicProgramming.java:101}) MOVE({TravelingSalesmanProblemDynamicProgramming tourCost(List  double[][])}  {TspDynamicProgramming tourCost(List  double[][])}),
59b4e3b4ae9875bd4986f8b73b1d66f26d0080bf,RENAME, RENAME	{Class MinimumWeightPerfectMatchingIterative at src/main/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingIterative.java:19}	{Class WeightedMaximumCardinalityMatchingIterative at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingIterative.java:19}) RENAME({com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingIterative}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingIterative}),
59b4e3b4ae9875bd4986f8b73b1d66f26d0080bf,RENAME, RENAME	{Class MinimumWeightPerfectMatchingTest at src/test/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingTest.java:8}	{Class WeightedMaximumCardinalityMatchingTest at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:8}) RENAME({com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingTest}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest}),
59b4e3b4ae9875bd4986f8b73b1d66f26d0080bf,RENAME, RENAME	{Class MinimumWeightPerfectMatchingRecursive at src/main/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingRecursive.java:20}	{Class WeightedMaximumCardinalityMatchingRecursive at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:19}) RENAME({com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingRecursive}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPollOnEmpty() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:29}	{Method testPollOnEmpty(Queue) at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:29}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.queue.QueueTest testPollOnEmpty()}  {com.williamfiset.algorithms.datastructures.queue.QueueTest testPollOnEmpty(Queue)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testExhaustively() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:69}	{Method testExhaustively(Queue) at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:64}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.queue.QueueTest testExhaustively()}  {com.williamfiset.algorithms.datastructures.queue.QueueTest testExhaustively(Queue)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPeek() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:51}	{Method testPeek(Queue) at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:48}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.queue.QueueTest testPeek()}  {com.williamfiset.algorithms.datastructures.queue.QueueTest testPeek(Queue)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testEmptyQueue() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:21}	{Method testEmptyQueue(Queue) at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:22}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.queue.QueueTest testEmptyQueue()}  {com.williamfiset.algorithms.datastructures.queue.QueueTest testEmptyQueue(Queue)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPeek() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:51}	{Method testPeek(Stack) at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:48}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.stack.StackTest testPeek()}  {com.williamfiset.algorithms.datastructures.stack.StackTest testPeek(Stack)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testExhaustively() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:69}	{Method testExhaustively(Stack) at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:64}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.stack.StackTest testExhaustively()}  {com.williamfiset.algorithms.datastructures.stack.StackTest testExhaustively(Stack)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPoll() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:60}	{Method testPoll(Queue) at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:56}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.queue.QueueTest testPoll()}  {com.williamfiset.algorithms.datastructures.queue.QueueTest testPoll(Queue)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPeekOnEmpty() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:36}	{Method testPeekOnEmpty(Stack) at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:35}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.stack.StackTest testPeekOnEmpty()}  {com.williamfiset.algorithms.datastructures.stack.StackTest testPeekOnEmpty(Stack)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,RENAME, RENAME	{Method setup() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:14}	{Method inputs() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:14}) RENAME({com.williamfiset.algorithms.datastructures.stack.StackTest setup()}  {com.williamfiset.algorithms.datastructures.stack.StackTest inputs()}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPop() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:60}	{Method testPop(Stack) at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:56}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.stack.StackTest testPop()}  {com.williamfiset.algorithms.datastructures.stack.StackTest testPop(Stack)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testEmptyStack() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:21}	{Method testEmptyStack(Stack) at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:22}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.stack.StackTest testEmptyStack()}  {com.williamfiset.algorithms.datastructures.stack.StackTest testEmptyStack(Stack)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPopOnEmpty() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:29}	{Method testPopOnEmpty(Stack) at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:29}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.stack.StackTest testPopOnEmpty()}  {com.williamfiset.algorithms.datastructures.stack.StackTest testPopOnEmpty(Stack)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPeekOnEmpty() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:36}	{Method testPeekOnEmpty(Queue) at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:35}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.queue.QueueTest testPeekOnEmpty()}  {com.williamfiset.algorithms.datastructures.queue.QueueTest testPeekOnEmpty(Queue)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testPush() at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:43}	{Method testPush(Stack) at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:41}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.stack.StackTest testPush()}  {com.williamfiset.algorithms.datastructures.stack.StackTest testPush(Stack)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testOffer() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:43}	{Method testOffer(Queue) at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:41}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.queue.QueueTest testOffer()}  {com.williamfiset.algorithms.datastructures.queue.QueueTest testOffer(Queue)}),
04d5d2f41e0ef33eb6e5e8c5179e6b5ee938b0a8,RENAME, RENAME	{Method setup() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:14}	{Method inputs() at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:14}) RENAME({com.williamfiset.algorithms.datastructures.queue.QueueTest setup()}  {com.williamfiset.algorithms.datastructures.queue.QueueTest inputs()}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,RENAME, RENAME	{Method sumQuery(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:80}	{Method rangeQuery(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:114}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree sumQuery(int  int  int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree rangeQuery(int  int  int  int  int)}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,RENAME, RENAME	{Method sumQuery(int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:70}	{Method rangeQuery(int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:94}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree sumQuery(int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree rangeQuery(int  int)}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method bruteForceSum(int[]  int  int) at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTreeTest.java:68}	{Method bruteForceSum(long[]  int  int) at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTreeTest.java:204}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTreeTest bruteForceSum(int[]  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTreeTest bruteForceSum(long[]  int  int)}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method update(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:127}	{Method update(int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:173}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree update(int  int  int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree update(int  int  int  int  long)}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method update(int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:123}	{Method update(int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:169}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree update(int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree update(int  long)}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,RENAME, RENAME	{Method buildTree(int  int  int  int[]) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:45}	{Method buildSegmentTree(int  int  int  long[]) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:74}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree buildTree(int  int  int  int[])}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree buildSegmentTree(int  int  int  long[])}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,RENAME, RENAME	{Method sumQuery2(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:103}	{Method rangeQuery2(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:148}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree sumQuery2(int  int  int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree rangeQuery2(int  int  int  int  int)}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int[]) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:29}	{Method new(long[]  Operation) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:42}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree new(int[])}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree new(long[]  Operation)}),
d83cae8cb3e9f9c78c173b1b1f560f070e757d7b,RENAME, RENAME	{Method testRandomPointQueries() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTreeTest.java:44}	{Method testRandomPointUpdatesAndSumRangeQueries() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTreeTest.java:47}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTreeTest testRandomPointQueries()}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTreeTest testRandomPointUpdatesAndSumRangeQueries()}),
85041784874a44ca81cab13fbe2eccccbae60ed6,MOVE, MOVE	{Class MinimumWeightPerfectMatching at com/williamfiset/algorithms/dp/MinimumWeightPerfectMatching.java:14}	{Class MinimumWeightPerfectMatching at com/williamfiset/algorithms/dp/MinimumWeightPerfectMatching.java:15}) MOVE({MinimumWeightPerfectMatching}  {com.williamfiset.algorithms.dp.MinimumWeightPerfectMatching}),
9345fcae35303fdd258b1cae2087811ee25257df,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method cut(PT[]  PT  PT) at Geometry/ConvexPolygonCut.java:31}	{Method cut(Pt[]  Pt  Pt) at Geometry/ConvexPolygonCutWithLineSegment.java:32}) CHANGE_SIGNATURE({ConvexPolygonCut cut(PT[]  PT  PT)}  {ConvexPolygonCutWithLineSegment cut(Pt[]  Pt  Pt)}),
9345fcae35303fdd258b1cae2087811ee25257df,RENAME, RENAME	{Class PT at Geometry/ConvexPolygonCut.java:17}	{Class Pt at Geometry/ConvexPolygonCutWithLineSegment.java:17}) RENAME({ConvexPolygonCut PT}  {ConvexPolygonCutWithLineSegment Pt}),
9345fcae35303fdd258b1cae2087811ee25257df,RENAME, RENAME	{Class ConvexPolygonCut at Geometry/ConvexPolygonCut.java:11}	{Class ConvexPolygonCutWithLineSegment at Geometry/ConvexPolygonCutWithLineSegment.java:12}) RENAME({ConvexPolygonCut}  {ConvexPolygonCutWithLineSegment}),
d1edf4f8ad8cf6f6ca94775b3419eee43166b3f3,RENAME, RENAME	{Method topologicalSortDFS(int  int  boolean[]  int[]  Map) at GraphTheory/TopologicalSortAdjacencyList.java:29}	{Method dfs(int  int  boolean[]  int[]  Map) at GraphTheory/TopologicalSortAdjacencyList.java:29}) RENAME({TopologicalSortAdjacencyList topologicalSortDFS(int  int  boolean[]  int[]  Map)}  {TopologicalSortAdjacencyList dfs(int  int  boolean[]  int[]  Map)}),
755837fa366d552b85307da156256bbd90446836,RENAME, RENAME	{Method createGraph(int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java:155}	{Method createEmptyGraph(int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java:155}) RENAME({com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism createGraph(int)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism createEmptyGraph(int)}),
575f7620c895e3d1d408eeddbd473efe6d532157,MOVE, MOVE	{Method removeLeft(long  int  int  int) at StringAlgorithms/RabinKarp.java:273}	{Method removeLeft(long  char  int  int) at StringAlgorithms/RabinKarp.java:136}) MOVE({StringSet removeLeft(long  int  int  int)}  {RabinKarp removeLeft(long  char  int  int)}),
575f7620c895e3d1d408eeddbd473efe6d532157,MOVE, MOVE	{Method removeRight(long  int  int) at StringAlgorithms/RabinKarp.java:281}	{Method removeRight(long  char  int) at StringAlgorithms/RabinKarp.java:142}) MOVE({StringSet removeRight(long  int  int)}  {RabinKarp removeRight(long  char  int)}),
575f7620c895e3d1d408eeddbd473efe6d532157,MOVE, MOVE	{Method addRight(long  int  int) at StringAlgorithms/RabinKarp.java:251}	{Method addRight(long  char  int) at StringAlgorithms/RabinKarp.java:119}) MOVE({StringSet addRight(long  int  int)}  {RabinKarp addRight(long  char  int)}),
575f7620c895e3d1d408eeddbd473efe6d532157,MOVE, MOVE	{Method computeHash(String) at StringAlgorithms/RabinKarp.java:172}	{Method computeHash(String) at StringAlgorithms/RabinKarp.java:158}) MOVE({StringSet computeHash(String)}  {RabinKarp computeHash(String)}),
575f7620c895e3d1d408eeddbd473efe6d532157,MOVE, MOVE	{Method addLeft(long  int  int  int) at StringAlgorithms/RabinKarp.java:260}	{Method addLeft(long  char  int  int) at StringAlgorithms/RabinKarp.java:125}) MOVE({StringSet addLeft(long  int  int  int)}  {RabinKarp addLeft(long  char  int  int)}),
66febf87469c718f727f012aee741c30ed945825,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/networkflow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java:91}	{Method createEmptyGraph(int) at com/williamfiset/algorithms/graphtheory/networkflow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java:78}) EXTRACT({com.williamfiset.algorithms.graphtheory.MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList main(String[])}  {com.williamfiset.algorithms.graphtheory.networkflow.MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList createEmptyGraph(int)}),
66febf87469c718f727f012aee741c30ed945825,MOVE, MOVE	{Class MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java:18}	{Class MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java:18}) MOVE({com.williamfiset.algorithms.graphtheory.MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList}  {com.williamfiset.algorithms.graphtheory.networkflow.MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList}),
f6817d029d0618f57b04172e8ba36f37fbf03051,RENAME, RENAME	{Method createEmptyGraph(int) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList2.java:20}	{Method createEmptyTree(int) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList.java:20}) RENAME({com.williamfiset.algorithms.graphtheory.TreeCanonicalFormAdjacencyList2 createEmptyGraph(int)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyList2 createEmptyTree(int)}),
f6817d029d0618f57b04172e8ba36f37fbf03051,MOVE, MOVE	{Class TreeNode at com/williamfiset/algorithms/graphtheory/treealgorithms/[UNTESTED]RootingTree.java:14}	{Class TreeNode at com/williamfiset/algorithms/graphtheory/treealgorithms/[UNTESTED]RootingTree.java:14}) MOVE({com.williamfiset.algorithms.graphtheory.TreeNode}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeNode}),
f6817d029d0618f57b04172e8ba36f37fbf03051,MOVE_RENAME, MOVE_RENAME	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList2.java:108}	{Method testSlidesExample() at javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyListTest.java:103}) MOVE_RENAME({com.williamfiset.algorithms.graphtheory.TreeCanonicalFormAdjacencyList2 main(String[])}  {javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyListTest testSlidesExample()}),
f6817d029d0618f57b04172e8ba36f37fbf03051,RENAME, RENAME	{Method canonizeTree(List) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList2.java:32}	{Method encodeTree(List) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList.java:63}) RENAME({com.williamfiset.algorithms.graphtheory.TreeCanonicalFormAdjacencyList2 canonizeTree(List)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyList2 encodeTree(List)}),
f6817d029d0618f57b04172e8ba36f37fbf03051,MOVE, MOVE	{Class RootingTree at com/williamfiset/algorithms/graphtheory/treealgorithms/[UNTESTED]RootingTree.java:33}	{Class RootingTree at com/williamfiset/algorithms/graphtheory/treealgorithms/[UNTESTED]RootingTree.java:33}) MOVE({com.williamfiset.algorithms.graphtheory.RootingTree}  {com.williamfiset.algorithms.graphtheory.treealgorithms.RootingTree}),
f6817d029d0618f57b04172e8ba36f37fbf03051,MOVE, MOVE	{Class TreeDiameter at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeDiameter.java:13}	{Class TreeDiameter at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeDiameter.java:13}) MOVE({com.williamfiset.algorithms.graphtheory.TreeDiameter}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeDiameter}),
f6817d029d0618f57b04172e8ba36f37fbf03051,MOVE, MOVE	{Class TreeCanonicalFormAdjacencyList2 at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList2.java:18}	{Class TreeCanonicalFormAdjacencyList2 at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList.java:18}) MOVE({com.williamfiset.algorithms.graphtheory.TreeCanonicalFormAdjacencyList2}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyList2}),
f6817d029d0618f57b04172e8ba36f37fbf03051,MOVE, MOVE	{Class TreeCenter at com/williamfiset/algorithms/graphtheory/treealgorithms/[UNTESTED]TreeCenter.java:12}	{Class TreeCenter at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenter.java:12}) MOVE({com.williamfiset.algorithms.graphtheory.TreeCenter}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenter}),
b05f41a6b29f98e32f442aad5c13f724f3227bd8,EXTRACT, EXTRACT	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/dp/examples/narrowartgallery/NarrowArtGalleryRecursive.java:70}	{Method mainProgram() at src/main/java/com/williamfiset/algorithms/dp/examples/narrowartgallery/NarrowArtGalleryRecursive.java:66}) EXTRACT({NarrowArtGalleryRecursive main(String[])}  {NarrowArtGalleryRecursive mainProgram()}),
90c98db5da7a0bb29faa250becde9ffb8edac0ee,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  int[]  long) at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:71}	{Method augment(long) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:41}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.Dinics dfs(int  int[]  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase Edge augment(long)}),
90c98db5da7a0bb29faa250becde9ffb8edac0ee,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:48}	{Method augment(long) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:41}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase Edge augment(long)}),
90c98db5da7a0bb29faa250becde9ffb8edac0ee,EXTRACT_MOVE, EXTRACT_MOVE	{Method bfs() at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:46}	{Method augment(long) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:41}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyList bfs()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase Edge augment(long)}),
90c98db5da7a0bb29faa250becde9ffb8edac0ee,RENAME, RENAME	{Class MinCostMaxFlow at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:18}	{Class MinCostMaxFlowJohnsons at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowJohnsons.java:21}) RENAME({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlow}  {com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowJohnsons}),
90c98db5da7a0bb29faa250becde9ffb8edac0ee,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:71}	{Method augment(long) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:41}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase Edge augment(long)}),
621df41cf4510ad8bcdbde33707b3cf78962b007,MOVE_RENAME, MOVE_RENAME	{Method testComplexPath4() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:194}	{Method testInvalidGraph3() at javatests/com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyListTest.java:140}) MOVE_RENAME({com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList testComplexPath4()}  {javatests.com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyListTest testInvalidGraph3()}),
621df41cf4510ad8bcdbde33707b3cf78962b007,RENAME, RENAME	{Method testSimplePath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:108}	{Method smallExample() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:97}) RENAME({com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList testSimplePath()}  {com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList smallExample()}),
f7161cdb117621bcd4e99fb27a755ad56767e0b3,EXTRACT, EXTRACT	{Method display() at StringAlgorithms/LongestCommonSubstring.java:278}	{Method display(int) at StringAlgorithms/LongestCommonSubstring.java:283}) EXTRACT({LongestCommonSubstring SuffixArray display()}  {LongestCommonSubstring SuffixArray display(int)}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN, PUSH_DOWN	{Method iterator() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:50}	{Method iterator() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ListStack.java:50}) PUSH_DOWN({com.williamfiset.algorithms.datastructures.stack.Stack iterator()}  {com.williamfiset.algorithms.datastructures.stack.ListStack iterator()}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method push(T) at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:31}	{Method push(T) at src/main/java/com/williamfiset/algorithms/datastructures/stack/ListStack.java:31}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack push(T)}  {com.williamfiset.algorithms.datastructures.stack.ListStack push(T)}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method peek() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:44}	{Method peek() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ArrayStack.java:54}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack peek()}  {com.williamfiset.algorithms.datastructures.stack.ArrayStack peek()}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method pop() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:37}	{Method pop() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ListStack.java:37}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack pop()}  {com.williamfiset.algorithms.datastructures.stack.ListStack pop()}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method isEmpty() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:26}	{Method isEmpty() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ArrayStack.java:23}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack isEmpty()}  {com.williamfiset.algorithms.datastructures.stack.ArrayStack isEmpty()}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method isEmpty() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:26}	{Method isEmpty() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ListStack.java:26}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack isEmpty()}  {com.williamfiset.algorithms.datastructures.stack.ListStack isEmpty()}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method pop() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:37}	{Method pop() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ArrayStack.java:45}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack pop()}  {com.williamfiset.algorithms.datastructures.stack.ArrayStack pop()}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method push(T) at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:31}	{Method push(T) at src/main/java/com/williamfiset/algorithms/datastructures/stack/ArrayStack.java:28}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack push(T)}  {com.williamfiset.algorithms.datastructures.stack.ArrayStack push(T)}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method size() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:21}	{Method size() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ArrayStack.java:18}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack size()}  {com.williamfiset.algorithms.datastructures.stack.ArrayStack size()}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method size() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:21}	{Method size() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ListStack.java:21}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack size()}  {com.williamfiset.algorithms.datastructures.stack.ListStack size()}),
b670e202ff1c6f1deca723374e121c068081dc63,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method peek() at src/main/java/com/williamfiset/algorithms/datastructures/stack/Stack.java:44}	{Method peek() at src/main/java/com/williamfiset/algorithms/datastructures/stack/ListStack.java:44}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.stack.Stack peek()}  {com.williamfiset.algorithms.datastructures.stack.ListStack peek()}),
0d4960e78a68ade680e445f64f3de89d56d944f2,RENAME, RENAME	{Class TreeCanonicalFormAdjacencyList2 at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList.java:18}	{Class TreeCanonicalFormAdjacencyList at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList.java:18}) RENAME({com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyList2}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyList}),
fd3bb676cb3a959ee9ac1800f165422c272a7d6d,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyList.java:69}	{Method firstGraphFromSlides() at com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyList.java:190}) EXTRACT({com.williamfiset.algorithms.graphtheory.LazyPrimsAdjacencyList main(String[])}  {com.williamfiset.algorithms.graphtheory.LazyPrimsAdjacencyList firstGraphFromSlides()}),
fd3bb676cb3a959ee9ac1800f165422c272a7d6d,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyList.java:69}	{Method squareGraphFromSlides() at com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyList.java:220}) EXTRACT({com.williamfiset.algorithms.graphtheory.LazyPrimsAdjacencyList main(String[])}  {com.williamfiset.algorithms.graphtheory.LazyPrimsAdjacencyList squareGraphFromSlides()}),
fd3bb676cb3a959ee9ac1800f165422c272a7d6d,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method relaxEdgesAtNode(int  MinIndexedDHeap) at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:46}	{Method relaxEdgesAtNode(int) at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:73}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList relaxEdgesAtNode(int  MinIndexedDHeap)}  {com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList relaxEdgesAtNode(int)}),
3037e90e666d8bec4c8c00b87e37e2bbba1b8555,RENAME, RENAME	{Method createGraph(int) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:118}	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:140}) RENAME({com.williamfiset.algorithms.graphtheory.FordFulkersonDfsSolverAdjacencyList createGraph(int)}  {com.williamfiset.algorithms.graphtheory.FordFulkersonDfsSolverAdjacencyList initializeGraph()}),
0e0c7a372950fa0036815479ff3b9015d443b742,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dfs(TreeNode  long) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:147}	{Method dfs(TreeNode  long  int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:131}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour dfs(TreeNode  long)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour dfs(TreeNode  long  int)}),
c989ae70e9c64070a647070b2b3ece0dc7718974,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dfs(int  int  int[]  int[]  boolean[]  List) at GraphTheory/BridgesAdjacencyList.java:34}	{Method dfs(int  int  List) at GraphTheory/BridgesAdjacencyList.java:34}) CHANGE_SIGNATURE({BridgesAdjacencyList dfs(int  int  int[]  int[]  boolean[]  List)}  {BridgesAdjacencyList dfs(int  int  List)}),
aca68ad6ce71e5a156b6df32267e2b688750f5a1,MOVE, MOVE	{Class FordFulkersonDfsSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:15}	{Class FordFulkersonDfsSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:15}) MOVE({com.williamfiset.algorithms.graphtheory.FordFulkersonDfsSolverAdjacencyList}  {com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList}),
172f3a7ecf517ce74522c2a0d4e75d4e48e98a28,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dijkstra(Map  int  int  int) at com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyList.java:47}	{Method dijkstra(int  int) at com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyList.java:116}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.DijkstrasShortestPathAdjacencyList dijkstra(Map  int  int  int)}  {com.williamfiset.algorithms.graphtheory.DijkstrasShortestPathAdjacencyList dijkstra(int  int)}),
7bab9b9d39bf76e743e2a40a1bc6e9055a20ab4b,RENAME, RENAME	{Method isSet(long[]  int) at com/williamfiset/algorithms/math/CompressedPrimeSieve.java:27}	{Method isNotSet(long[]  int) at com/williamfiset/algorithms/math/CompressedPrimeSieve.java:32}) RENAME({com.williamfiset.algorithms.math.CompressedPrimeSieve isSet(long[]  int)}  {com.williamfiset.algorithms.math.CompressedPrimeSieve isNotSet(long[]  int)}),
d6dbfdb595ab849f2927176ca9e5e1ee87149828,MOVE, MOVE	{Method removeColor(Map  int  int) at StringAlgorithms/LongestCommonSubstring.java:263}	{Method removeColor(Map  int  int) at StringAlgorithms/LongestCommonSubstring.java:205}) MOVE({SuffixArray removeColor(Map  int  int)}  {LongestCommonSubstring removeColor(Map  int  int)}),
d6dbfdb595ab849f2927176ca9e5e1ee87149828,MOVE, MOVE	{Method computeTextLength(String[]) at StringAlgorithms/LongestCommonSubstring.java:149}	{Method computeTextLength(String[]) at StringAlgorithms/LongestCommonSubstring.java:83}) MOVE({SuffixArray computeTextLength(String[])}  {LongestCommonSubstring computeTextLength(String[])}),
d6dbfdb595ab849f2927176ca9e5e1ee87149828,MOVE, MOVE	{Method constructText(String[]  int  int) at StringAlgorithms/LongestCommonSubstring.java:132}	{Method constructText(String[]  int  int) at StringAlgorithms/LongestCommonSubstring.java:66}) MOVE({SuffixArray constructText(String[]  int  int)}  {LongestCommonSubstring constructText(String[]  int  int)}),
d6dbfdb595ab849f2927176ca9e5e1ee87149828,MOVE, MOVE	{Method addColor(Map  int  int) at StringAlgorithms/LongestCommonSubstring.java:271}	{Method addColor(Map  int  int) at StringAlgorithms/LongestCommonSubstring.java:213}) MOVE({SuffixArray addColor(Map  int  int)}  {LongestCommonSubstring addColor(Map  int  int)}),
d6dbfdb595ab849f2927176ca9e5e1ee87149828,MOVE, MOVE	{Method fillIndexMap(String[]  int[]) at StringAlgorithms/LongestCommonSubstring.java:106}	{Method fillIndexMap(String[]  int[]) at StringAlgorithms/LongestCommonSubstring.java:40}) MOVE({SuffixArray fillIndexMap(String[]  int[])}  {LongestCommonSubstring fillIndexMap(String[]  int[])}),
d6dbfdb595ab849f2927176ca9e5e1ee87149828,MOVE, MOVE	{Method lcs(String[]  int) at StringAlgorithms/LongestCommonSubstring.java:156}	{Method lcs(String[]  int) at StringAlgorithms/LongestCommonSubstring.java:90}) MOVE({SuffixArray lcs(String[]  int)}  {LongestCommonSubstring lcs(String[]  int)}),
1c744e12470d09db6155172b2b0aa8539eea650c,RENAME, RENAME	{Method function(Long  Long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQuerySumUpdateSegmentTree.java:35}	{Method sumFunction(Long  Long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQuerySumUpdateSegmentTree.java:27}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTree function(Long  Long)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTree sumFunction(Long  Long)}),
1c744e12470d09db6155172b2b0aa8539eea650c,MOVE_RENAME, MOVE_RENAME	{Method nullSafeFunction(Long  Long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQuerySumUpdateSegmentTree.java:27}	{Method minFunction(Long  Long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/MinQueryAssignUpdateSegmentTree.java:26}) MOVE_RENAME({com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTree nullSafeFunction(Long  Long)}  {com.williamfiset.algorithms.datastructures.segmenttree.MinQueryAssignUpdateSegmentTree minFunction(Long  Long)}),
8a6ca02d93ee71e9a8f54e2f72e646c753c22dfd,RENAME, RENAME	{Class EagerPrimsAdjacencyList at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsAdjacencyList.java:29}	{Class EagerPrimsExample at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsExample.java:29}) RENAME({com.williamfiset.algorithms.graphtheory.examples.EagerPrimsAdjacencyList}  {com.williamfiset.algorithms.graphtheory.examples.EagerPrimsExample}),
8a6ca02d93ee71e9a8f54e2f72e646c753c22dfd,INTERNAL_MOVE, INTERNAL_MOVE	{Method getMst() at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsAdjacencyList.java:127}	{Method getMst() at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsExample.java:127}) INTERNAL_MOVE({com.williamfiset.algorithms.graphtheory.examples.EagerPrimsAdjacencyList getMst()}  {com.williamfiset.algorithms.graphtheory.examples.EagerPrimsExample MinimumSpanningTreeSolver getMst()}),
8a6ca02d93ee71e9a8f54e2f72e646c753c22dfd,INTERNAL_MOVE, INTERNAL_MOVE	{Method getMstCost() at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsAdjacencyList.java:132}	{Method getMstCost() at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsExample.java:132}) INTERNAL_MOVE({com.williamfiset.algorithms.graphtheory.examples.EagerPrimsAdjacencyList getMstCost()}  {com.williamfiset.algorithms.graphtheory.examples.EagerPrimsExample MinimumSpanningTreeSolver getMstCost()}),
8a6ca02d93ee71e9a8f54e2f72e646c753c22dfd,INTERNAL_MOVE, INTERNAL_MOVE	{Method relaxEdgesAtNode(int) at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsAdjacencyList.java:169}	{Method relaxEdgesAtNode(int) at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsExample.java:174}) INTERNAL_MOVE({com.williamfiset.algorithms.graphtheory.examples.EagerPrimsAdjacencyList relaxEdgesAtNode(int)}  {com.williamfiset.algorithms.graphtheory.examples.EagerPrimsExample MinimumSpanningTreeSolver relaxEdgesAtNode(int)}),
8a6ca02d93ee71e9a8f54e2f72e646c753c22dfd,INTERNAL_MOVE, INTERNAL_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsAdjacencyList.java:138}	{Method solve() at com/williamfiset/algorithms/graphtheory/examples/EagerPrimsExample.java:143}) INTERNAL_MOVE({com.williamfiset.algorithms.graphtheory.examples.EagerPrimsAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.examples.EagerPrimsExample MinimumSpanningTreeSolver solve()}),
2cec4695af6f849a1913c2cc0c5ff2c555e6a31d,EXTRACT, EXTRACT	{Method graphWithCyclesTest() at GraphTheory/tests/BridgesAdjacencyListIterativeTest.java:75}	{Method getSortedBridges(List) at GraphTheory/tests/BridgesAdjacencyListIterativeTest.java:156}) EXTRACT({BridgesAdjacencyListIterativeTest graphWithCyclesTest()}  {BridgesAdjacencyListIterativeTest getSortedBridges(List)}),
2cec4695af6f849a1913c2cc0c5ff2c555e6a31d,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dfs(int  int) at GraphTheory/ArticulationPointsAdjacencyList.java:43}	{Method dfs(int  int  int) at GraphTheory/ArticulationPointsAdjacencyList.java:48}) CHANGE_SIGNATURE({ArticulationPointsAdjacencyList dfs(int  int)}  {ArticulationPointsAdjacencyList dfs(int  int  int)}),
2cec4695af6f849a1913c2cc0c5ff2c555e6a31d,EXTRACT, EXTRACT	{Method graphWithCyclesTest() at GraphTheory/tests/BridgesAdjacencyListTest.java:75}	{Method getSortedBridges(List) at GraphTheory/tests/BridgesAdjacencyListTest.java:155}) EXTRACT({BridgesAdjacencyListTest graphWithCyclesTest()}  {BridgesAdjacencyListTest getSortedBridges(List)}),
2cec4695af6f849a1913c2cc0c5ff2c555e6a31d,EXTRACT, EXTRACT	{Method testTreeCase() at GraphTheory/tests/BridgesAdjacencyListIterativeTest.java:24}	{Method getSortedBridges(List) at GraphTheory/tests/BridgesAdjacencyListIterativeTest.java:156}) EXTRACT({BridgesAdjacencyListIterativeTest testTreeCase()}  {BridgesAdjacencyListIterativeTest getSortedBridges(List)}),
2cec4695af6f849a1913c2cc0c5ff2c555e6a31d,EXTRACT, EXTRACT	{Method testGraphInSlides() at GraphTheory/tests/BridgesAdjacencyListIterativeTest.java:120}	{Method getSortedBridges(List) at GraphTheory/tests/BridgesAdjacencyListIterativeTest.java:156}) EXTRACT({BridgesAdjacencyListIterativeTest testGraphInSlides()}  {BridgesAdjacencyListIterativeTest getSortedBridges(List)}),
2cec4695af6f849a1913c2cc0c5ff2c555e6a31d,EXTRACT, EXTRACT	{Method testGraphInSlides() at GraphTheory/tests/BridgesAdjacencyListTest.java:120}	{Method getSortedBridges(List) at GraphTheory/tests/BridgesAdjacencyListTest.java:155}) EXTRACT({BridgesAdjacencyListTest testGraphInSlides()}  {BridgesAdjacencyListTest getSortedBridges(List)}),
2cec4695af6f849a1913c2cc0c5ff2c555e6a31d,EXTRACT, EXTRACT	{Method testTreeCase() at GraphTheory/tests/BridgesAdjacencyListTest.java:24}	{Method getSortedBridges(List) at GraphTheory/tests/BridgesAdjacencyListTest.java:155}) EXTRACT({BridgesAdjacencyListTest testTreeCase()}  {BridgesAdjacencyListTest getSortedBridges(List)}),
dca1c5dc9716dc3672fe50cccbb423f2e2136041,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int  double) at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:129}	{Method new(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:184}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlow Node new(int  double)}  {com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowSolver Node new(int  long)}),
dca1c5dc9716dc3672fe50cccbb423f2e2136041,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int  int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:16}	{Method new(int  int  long  long) at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:26}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlow Edge new(int  int  int  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowSolver Edge new(int  int  long  long)}),
dca1c5dc9716dc3672fe50cccbb423f2e2136041,RENAME, RENAME	{Class MinCostMaxFlow at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:10}	{Class MinCostMaxFlowSolver at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:17}) RENAME({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlow}  {com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowSolver}),
494eb5f8298de192c9b56d60c914ca8367528b80,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(List) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:55}	{Method new(int  Edge[]) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:49}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.Boruvkas new(List)}  {com.williamfiset.algorithms.graphtheory.Boruvkas new(int  Edge[])}),
494eb5f8298de192c9b56d60c914ca8367528b80,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int  int  int) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:15}	{Method new(int  int  int  int) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:15}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.Boruvkas Edge new(int  int  int)}  {com.williamfiset.algorithms.graphtheory.Boruvkas Edge new(int  int  int  int)}),
494eb5f8298de192c9b56d60c914ca8367528b80,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method addDirectedEdge(List  int  int  int) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:134}	{Method addDirectedEdge(Edge[]  int  int  int  int) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:121}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.Boruvkas addDirectedEdge(List  int  int  int)}  {com.williamfiset.algorithms.graphtheory.Boruvkas addDirectedEdge(Edge[]  int  int  int  int)}),
32db7a969da525a9dc3a6d87d61bebf07c825923,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/math/CompressedPrimeSieve.java:60}	{Method isPrime(long[]  int) at com/williamfiset/algorithms/math/CompressedPrimeSieve.java:39}) EXTRACT({com.williamfiset.algorithms.math.CompressedPrimeSieve main(String[])}  {com.williamfiset.algorithms.math.CompressedPrimeSieve isPrime(long[]  int)}),
f7fecc640cb73e3cfaa00314711c41c59c262a58,RENAME, RENAME	{Method treeCenter(List) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenterLongestPathImpl.java:43}	{Method findTreeCenters(List) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenterLongestPathImpl.java:44}) RENAME({com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterLongestPathImpl treeCenter(List)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterLongestPathImpl findTreeCenters(List)}),
e97d8a88bc7f5164ad9636c8ba41b9f691c0318f,EXTRACT, EXTRACT	{Method main(String[]) at GraphTheory/TspDynamicProgrammingIterative.java:161}	{Method test() at GraphTheory/TspDynamicProgrammingIterative.java:159}) EXTRACT({TspDynamicProgrammingIterative main(String[])}  {TspDynamicProgrammingIterative test()}),
7fc65eedf3057c76d80b3283eaa67d5daea12148,RENAME, RENAME	{Class NarrowArtGallery at com/williamfiset/algorithms/dp/examples/NarrowArtGallery.java:10}	{Class NarrowArtGalleryRecursive at com/williamfiset/algorithms/dp/examples/NarrowArtGalleryRecursive.java:3}) RENAME({NarrowArtGallery}  {NarrowArtGalleryRecursive}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method push(int) at src/main/java/com/williamfiset/algorithms/datastructures/stack/IntStack.java:39}	{Method push(Integer) at src/main/java/com/williamfiset/algorithms/datastructures/stack/IntStack.java:40}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.stack.IntStack push(int)}  {com.williamfiset.algorithms.datastructures.stack.IntStack push(Integer)}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,RENAME, RENAME	{Method testEnqueueOneElement() at src/test/java/com/williamfiset/algorithms/datastructures/queue/IntQueueTest.java:35}	{Method testofferOneElement() at src/test/java/com/williamfiset/algorithms/datastructures/queue/IntQueueTest.java:35}) RENAME({com.williamfiset.algorithms.datastructures.queue.IntQueueTest testEnqueueOneElement()}  {com.williamfiset.algorithms.datastructures.queue.IntQueueTest testofferOneElement()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method peek() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:30}	{Method peek() at src/main/java/com/williamfiset/algorithms/datastructures/queue/LinkedQueue.java:30}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue peek()}  {com.williamfiset.algorithms.datastructures.queue.LinkedQueue peek()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method poll() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:37}	{Method poll() at src/main/java/com/williamfiset/algorithms/datastructures/queue/IntQueue.java:60}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue poll()}  {com.williamfiset.algorithms.datastructures.queue.IntQueue poll()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method poll() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:37}	{Method poll() at src/main/java/com/williamfiset/algorithms/datastructures/queue/ArrayQueue.java:36}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue poll()}  {com.williamfiset.algorithms.datastructures.queue.ArrayQueue poll()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,RENAME, RENAME	{Method testDequeueOneElement() at src/test/java/com/williamfiset/algorithms/datastructures/queue/IntQueueTest.java:100}	{Method testpollOneElement() at src/test/java/com/williamfiset/algorithms/datastructures/queue/IntQueueTest.java:100}) RENAME({com.williamfiset.algorithms.datastructures.queue.IntQueueTest testDequeueOneElement()}  {com.williamfiset.algorithms.datastructures.queue.IntQueueTest testpollOneElement()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method peek() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:30}	{Method peek() at src/main/java/com/williamfiset/algorithms/datastructures/queue/ArrayQueue.java:46}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue peek()}  {com.williamfiset.algorithms.datastructures.queue.ArrayQueue peek()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method size() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:19}	{Method size() at src/main/java/com/williamfiset/algorithms/datastructures/queue/LinkedQueue.java:19}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue size()}  {com.williamfiset.algorithms.datastructures.queue.LinkedQueue size()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method offer(T) at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:43}	{Method offer(T) at src/main/java/com/williamfiset/algorithms/datastructures/queue/LinkedQueue.java:43}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue offer(T)}  {com.williamfiset.algorithms.datastructures.queue.LinkedQueue offer(T)}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN, PUSH_DOWN	{Method iterator() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:49}	{Method iterator() at src/main/java/com/williamfiset/algorithms/datastructures/queue/LinkedQueue.java:49}) PUSH_DOWN({com.williamfiset.algorithms.datastructures.queue.Queue iterator()}  {com.williamfiset.algorithms.datastructures.queue.LinkedQueue iterator()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method poll() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:37}	{Method poll() at src/main/java/com/williamfiset/algorithms/datastructures/queue/LinkedQueue.java:37}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue poll()}  {com.williamfiset.algorithms.datastructures.queue.LinkedQueue poll()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method isEmpty() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:24}	{Method isEmpty() at src/main/java/com/williamfiset/algorithms/datastructures/queue/ArrayQueue.java:61}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue isEmpty()}  {com.williamfiset.algorithms.datastructures.queue.ArrayQueue isEmpty()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method isEmpty() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:24}	{Method isEmpty() at src/main/java/com/williamfiset/algorithms/datastructures/queue/LinkedQueue.java:24}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue isEmpty()}  {com.williamfiset.algorithms.datastructures.queue.LinkedQueue isEmpty()}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method offer(T) at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:43}	{Method offer(T) at src/main/java/com/williamfiset/algorithms/datastructures/queue/ArrayQueue.java:27}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue offer(T)}  {com.williamfiset.algorithms.datastructures.queue.ArrayQueue offer(T)}),
d5f4fab7bd4f4e9a3872b01db4b46309456dae41,PUSH_DOWN_IMPL, PUSH_DOWN_IMPL	{Method size() at src/main/java/com/williamfiset/algorithms/datastructures/queue/Queue.java:19}	{Method size() at src/main/java/com/williamfiset/algorithms/datastructures/queue/ArrayQueue.java:56}) PUSH_DOWN_IMPL({com.williamfiset.algorithms.datastructures.queue.Queue size()}  {com.williamfiset.algorithms.datastructures.queue.ArrayQueue size()}),
995250ded3624c7ef8eaf5c35e182435be90c89e,RENAME, RENAME	{Class BellmanFord at GraphTheory/BellmanFord.java:1}	{Class BellmanFordEdgeList at GraphTheory/BellmanFordEdgeList.java:1}) RENAME({BellmanFord}  {BellmanFordEdgeList}),
23dca84199aec00f65e84e0b8c35a63a44ed8021,INLINE, INLINE	{Method findInitialValues(int[]  int) at LinearAlgebra/LinearRecurrenceSolver.java:130}	{Method main(String[]) at LinearAlgebra/LinearRecurrenceSolver.java:125}) INLINE({LinearRecurrenceSolver findInitialValues(int[]  int)}  {LinearRecurrenceSolver main(String[])}),
83e02376e955b37a90920862b784ed29c50de472,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method lca(TreeNode  int  int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestor.java:71}	{Method lca(int  int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestor.java:91}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor lca(TreeNode  int  int)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor lca(int  int)}),
83e02376e955b37a90920862b784ed29c50de472,EXTRACT_MOVE, EXTRACT_MOVE	{Method testLcaOfTheSameNodeIsItself() at src/test/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorTest.java:64}	{Method size() at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestor.java:37}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorTest testLcaOfTheSameNodeIsItself()}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor TreeNode size()}),
75c0b8c644b5736981d6bbda8e1059905f21548f,INLINE, INLINE	{Method example2() at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:303}	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:23}) INLINE({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour example2()}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour main(String[])}),
21cce88d6d51f3e9eca75e742c03e7496d1573a7,INLINE, INLINE	{Method init(long[]) at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/examples/MinSparseTable.java:41}	{Method new(long[]) at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/examples/MinSparseTable.java:53}) INLINE({com.williamfiset.algorithms.datastructures.sparsetable.examples.MinSparseTable init(long[])}  {com.williamfiset.algorithms.datastructures.sparsetable.examples.MinSparseTable new(long[])}),
534aefb636c39e14184a8bc7b83c30df07d0c953,RENAME, RENAME	{Method createGraph(int) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenter.java:45}	{Method createEmptyTree(int) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenter.java:46}) RENAME({com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenter createGraph(int)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenter createEmptyTree(int)}),
365dc61a2031c00e040a0e82b3d9b3e56009d3bf,EXTRACT, EXTRACT	{Method rangeQuery(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:151}	{Method defaultValue() at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:135}) EXTRACT({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeQuery(int  int  int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree defaultValue()}),
578e2645befab80fd1fdbf24fa5a94daea0d7049,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int  Long  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2.java:49}	{Method new(int  Long  Long  Long  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2.java:52}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2 Segment new(int  Long  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2 Segment new(int  Long  Long  Long  int  int)}),
d53752c8630a5f066ede228d2fd91eb05a056b00,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method f(int  Rv[]  int[]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:138}	{Method f(int  MatchingCost[]  int[]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:142}) CHANGE_SIGNATURE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive f(int  Rv[]  int[])}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive f(int  MatchingCost[]  int[])}),
d53752c8630a5f066ede228d2fd91eb05a056b00,EXTRACT, EXTRACT	{Method f(int  Rv[]  int[]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:138}	{Method updateMatchingCost(MatchingCost  Double) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:177}) EXTRACT({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive f(int  Rv[]  int[])}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive updateMatchingCost(MatchingCost  Double)}),
d53752c8630a5f066ede228d2fd91eb05a056b00,INTERNAL_MOVE, INTERNAL_MOVE	{Method toString() at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:132}	{Method toString() at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:41}) INTERNAL_MOVE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive Rv toString()}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive MatchingCost toString()}),
5c829cd35a89ff76a03a6e5bdf54aac609a3afcd,EXTRACT, EXTRACT	{Method testMoreComplexPath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:151}	{Method addDirectedEdge(List  int  int) at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:103}) EXTRACT({com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList testMoreComplexPath()}  {com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList addDirectedEdge(List  int  int)}),
cc2a997df4def10c66317f8fd6f71c63fc3c1c63,EXTRACT, EXTRACT	{Method lcs(String[]  int) at StringAlgorithms/LongestCommonSubstring.java:100}	{Method removeColor(Map  int  int) at StringAlgorithms/LongestCommonSubstring.java:268}) EXTRACT({SuffixArray lcs(String[]  int)}  {SuffixArray removeColor(Map  int  int)}),
cc2a997df4def10c66317f8fd6f71c63fc3c1c63,EXTRACT, EXTRACT	{Method lcs(String[]  int) at StringAlgorithms/LongestCommonSubstring.java:100}	{Method constructText(String[]  int  int) at StringAlgorithms/LongestCommonSubstring.java:132}) EXTRACT({SuffixArray lcs(String[]  int)}  {SuffixArray constructText(String[]  int  int)}),
cc2a997df4def10c66317f8fd6f71c63fc3c1c63,EXTRACT, EXTRACT	{Method lcs(String[]  int) at StringAlgorithms/LongestCommonSubstring.java:100}	{Method fillIndexMap(String[]  int[]) at StringAlgorithms/LongestCommonSubstring.java:106}) EXTRACT({SuffixArray lcs(String[]  int)}  {SuffixArray fillIndexMap(String[]  int[])}),
cc2a997df4def10c66317f8fd6f71c63fc3c1c63,EXTRACT, EXTRACT	{Method lcs(String[]  int) at StringAlgorithms/LongestCommonSubstring.java:100}	{Method addColor(Map  int  int) at StringAlgorithms/LongestCommonSubstring.java:276}) EXTRACT({SuffixArray lcs(String[]  int)}  {SuffixArray addColor(Map  int  int)}),
c6e64e303e1d25305df27de83c6888fe26440145,RENAME, RENAME	{Method display(List) at com/williamfiset/algorithms/strings/Lcs.java:121}	{Method toString(List) at com/williamfiset/algorithms/strings/Lcs.java:127}) RENAME({com.williamfiset.algorithms.strings.Lcs SuffixArray display(List)}  {com.williamfiset.algorithms.strings.Lcs SuffixArray toString(List)}),
6d34107e6fa3722ff1d79411ada74b91f44f9361,RENAME, RENAME	{Method breakingLcs() at javatests/com/williamfiset/algorithms/strings/LongestCommonSubstringTest.java:30}	{Method multipleKValueTest1() at javatests/com/williamfiset/algorithms/strings/LongestCommonSubstringTest.java:30}) RENAME({javatests.com.williamfiset.algorithms.strings.LongestCommonSubstringTest breakingLcs()}  {javatests.com.williamfiset.algorithms.strings.LongestCommonSubstringTest multipleKValueTest1()}),
61a66049f6b08fe43f7065214ffe682b858e20b8,RENAME, RENAME	{Method example2() at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java:245}	{Method exampleFromSlides() at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java:245}) RENAME({com.williamfiset.algorithms.datastructures.sparsetable.SparseTable example2()}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTable exampleFromSlides()}),
2167477ccc86a1c00b60c7e113e2664a16e906cf,RENAME, RENAME	{Method cross(Point2D  Point2D  Point2D) at Geometry/ConvexHullMonotoneChainAlgorithm.java:69}	{Method orientation(Point2D  Point2D  Point2D) at Geometry/ConvexHullMonotoneChainsAlgorithm.java:80}) RENAME({ConvexHullMonotoneChainAlgorithm cross(Point2D  Point2D  Point2D)}  {ConvexHullMonotoneChainsAlgorithm orientation(Point2D  Point2D  Point2D)}),
2167477ccc86a1c00b60c7e113e2664a16e906cf,RENAME, RENAME	{Class ConvexHullMonotoneChainAlgorithm at Geometry/ConvexHullMonotoneChainAlgorithm.java:24}	{Class ConvexHullMonotoneChainsAlgorithm at Geometry/ConvexHullMonotoneChainsAlgorithm.java:26}) RENAME({ConvexHullMonotoneChainAlgorithm}  {ConvexHullMonotoneChainsAlgorithm}),
2ef2ca3a29c109836b938fd3c20b65aeba2b05bd,RENAME, RENAME	{Method rangeUpdate(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:302}	{Method rangeUpdate2(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:365}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeUpdate(int  int  int  int  int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeUpdate2(int  int  int  int  int  long)}),
2ef2ca3a29c109836b938fd3c20b65aeba2b05bd,RENAME, RENAME	{Method propagateQuery(int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:287}	{Method propagateWithCombinationFn(int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:303}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree propagateQuery(int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree propagateWithCombinationFn(int  int  int)}),
2ef2ca3a29c109836b938fd3c20b65aeba2b05bd,MOVE_RENAME, MOVE_RENAME	{Method bruteForceSumRangeQuery(long[]  int  int) at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:258}	{Method bruteForceSum(long[]  int  int) at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTreeTest.java:101}) MOVE_RENAME({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest bruteForceSumRangeQuery(long[]  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTreeTest bruteForceSum(long[]  int  int)}),
cb814bc7cf3e7b9c8780fef083a69e711013fb8d,INLINE, INLINE	{Method exampleFromSlides() at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:197}	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:193}) INLINE({com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample exampleFromSlides()}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample main(String[])}),
cb814bc7cf3e7b9c8780fef083a69e711013fb8d,RENAME, RENAME	{Class FordFulkersonDfsSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:138}	{Class FordFulkersonDfsSolver at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:138}) RENAME({com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample FordFulkersonDfsSolverAdjacencyList}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample FordFulkersonDfsSolver}),
8cce55c6510646429238a1f8c053c1cc7ee09c46,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:119}	{Method firstGraphFromSlides() at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:172}) EXTRACT({com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList main(String[])}  {com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList firstGraphFromSlides()}),
550373583e53ecc6b252bfc783bc2f20fde5b2a4,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method addUndirectedWeightedEdge(double[][]  int  int  double) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:96}	{Method addUndirectedWeightedEdge(Double[][]  int  int  double) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:94}) CHANGE_SIGNATURE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest addUndirectedWeightedEdge(double[][]  int  int  double)}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest addUndirectedWeightedEdge(Double[][]  int  int  double)}),
550373583e53ecc6b252bfc783bc2f20fde5b2a4,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(double[][]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:38}	{Method new(Double[][]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:39}) CHANGE_SIGNATURE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive new(double[][])}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive new(Double[][])}),
550373583e53ecc6b252bfc783bc2f20fde5b2a4,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method getImplementations(double[][]) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:78}	{Method getImplementations(Double[][]) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:77}) CHANGE_SIGNATURE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest getImplementations(double[][])}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest getImplementations(Double[][])}),
550373583e53ecc6b252bfc783bc2f20fde5b2a4,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(double[][]) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:18}	{Method new(Double[][]) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:17}) CHANGE_SIGNATURE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest BruteForceMwpm new(double[][])}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest BruteForceMwpm new(Double[][])}),
550373583e53ecc6b252bfc783bc2f20fde5b2a4,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method setCostMatrix(double[][]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:49}	{Method setCostMatrix(Double[][]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:50}) CHANGE_SIGNATURE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive setCostMatrix(double[][])}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive setCostMatrix(Double[][])}),
550373583e53ecc6b252bfc783bc2f20fde5b2a4,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method randomFillSymmetricMatrix(double[][]  int) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:331}	{Method randomFillSymmetricMatrix(Double[][]  int) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:351}) CHANGE_SIGNATURE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest randomFillSymmetricMatrix(double[][]  int)}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest randomFillSymmetricMatrix(Double[][]  int)}),
6c735c88980c737feaa19054eea4da12c13d06c6,EXTRACT, EXTRACT	{Method isBipartite() at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:31}	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:45}) EXTRACT({com.williamfiset.algorithms.graphtheory.networkflow.BipartiteGraphCheckAdjacencyList isBipartite()}  {com.williamfiset.algorithms.graphtheory.networkflow.BipartiteGraphCheckAdjacencyList solve()}),
6c735c88980c737feaa19054eea4da12c13d06c6,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method colorGraph(int  int  int[]) at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:47}	{Method colorGraph(int  int) at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:60}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.BipartiteGraphCheckAdjacencyList colorGraph(int  int  int[])}  {com.williamfiset.algorithms.graphtheory.networkflow.BipartiteGraphCheckAdjacencyList colorGraph(int  int)}),
94dceb165a1d7ac0aefff02af0d649497020b131,MOVE, MOVE	{Method buildTree(List  TreeNode  TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java:141}	{Method buildTree(List  TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/RootingTree.java:70}) MOVE({com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism buildTree(List  TreeNode  TreeNode)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.RootingTree buildTree(List  TreeNode)}),
94dceb165a1d7ac0aefff02af0d649497020b131,MOVE, MOVE	{Method buildTree(List  TreeNode  TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/RootingTree.java:73}	{Method buildTree(List  TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java:120}) MOVE({com.williamfiset.algorithms.graphtheory.treealgorithms.RootingTree buildTree(List  TreeNode  TreeNode)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism buildTree(List  TreeNode)}),
07e6705cdb1ac7607c13891dc721fe6949cc3153,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method bfs(List[]  int[]  int  int) at GraphTheory/NetworkFlow/EdmondsKarpAdjacencyList.java:69}	{Method bfs(List[]  boolean[]  int  int) at GraphTheory/NetworkFlow/EdmondsKarpAdjacencyList.java:83}) CHANGE_SIGNATURE({EdmondsKarpAdjacencyList bfs(List[]  int[]  int  int)}  {EdmondsKarpAdjacencyList bfs(List[]  boolean[]  int  int)}),
95b74983aec9594c1eb78fb8f145ab098b786a66,INLINE, INLINE	{Method butterflyStrangeOrdering() at GraphTheory/TarjanSccSolverAdjacencyList.java:129}	{Method main(String[]) at GraphTheory/TarjanSccSolverAdjacencyList.java:98}) INLINE({TarjanSccSolverAdjacencyList butterflyStrangeOrdering()}  {TarjanSccSolverAdjacencyList main(String[])}),
acc52215e4ee11511404c793a4d0557e20dfe5d2,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:116}	{Method dfs(int  int[]  long) at com/williamfiset/algorithms/graphtheory/networkflow/Dinics.java:116}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.Dinics dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.Dinics dfs(int  int[]  long)}),
5896bda31c94838b75832cd9b0fda752dd28dd3f,EXTRACT, EXTRACT	{Method main(String[]) at GraphTheory/BreadthFirstSearchAdjacencyListIterative.java:84}	{Method createEmptyGraph(int) at GraphTheory/BreadthFirstSearchAdjacencyListIterative.java:112}) EXTRACT({BreadthFirstSearchAdjacencyListIterative main(String[])}  {BreadthFirstSearchAdjacencyListIterative createEmptyGraph(int)}),
5896bda31c94838b75832cd9b0fda752dd28dd3f,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method bfs(Map  int  int) at GraphTheory/BreadthFirstSearchAdjacencyListIterative.java:24}	{Method bfs(int  int) at GraphTheory/BreadthFirstSearchAdjacencyListIterative.java:68}) CHANGE_SIGNATURE({BreadthFirstSearchAdjacencyListIterative bfs(Map  int  int)}  {BreadthFirstSearchAdjacencyListIterative bfs(int  int)}),
0fefc4cc66576f5c54e40e1c16428d90d75b12c8,RENAME, RENAME	{Method testSingleClauseSatisfiableCase() at GraphTheory/tests/TwoSatSolverAdjacencyListTest.java:17}	{Method testSimpleSatisfiable() at GraphTheory/tests/TwoSatSolverAdjacencyListTest.java:17}) RENAME({TwoSatSolverAdjacencyListTest testSingleClauseSatisfiableCase()}  {TwoSatSolverAdjacencyListTest testSimpleSatisfiable()}),
0d6fdde1c3b38df0bce9227fe5908e8b7c6c38bb,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method tsp(int  int  double[][]  Double[][]) at GraphTheory/TravelingSalesmanProblemDynamicProgramming.java:30}	{Method tsp(int  int  LinkedList  double[][]  TspSoln[][]) at GraphTheory/TravelingSalesmanProblemDynamicProgramming.java:81}) CHANGE_SIGNATURE({TravelingSalesmanProblemDynamicProgramming tsp(int  int  double[][]  Double[][])}  {TravelingSalesmanProblemDynamicProgramming tsp(int  int  LinkedList  double[][]  TspSoln[][])}),
cb61b106c8dc8a34f06e597c633552b66e0e149c,MOVE, MOVE	{Class BipartiteGraphCheckAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:13}	{Class BipartiteGraphCheckAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:16}) MOVE({com.williamfiset.algorithms.graphtheory.BipartiteGraphCheckAdjacencyList}  {com.williamfiset.algorithms.graphtheory.networkflow.BipartiteGraphCheckAdjacencyList}),
cb61b106c8dc8a34f06e597c633552b66e0e149c,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method displayGraph(Map  int) at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:213}	{Method displayGraph(List) at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:181}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.BipartiteGraphCheckAdjacencyList displayGraph(Map  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.BipartiteGraphCheckAdjacencyList displayGraph(List)}),
469bfa121225520badd6064f4d8b0653041fcfa6,RENAME, RENAME	{Class Permutation at ConstructiveAlgorithms/Permutation.java:1}	{Class Permutations at ConstructiveAlgorithms/Permutations.java:1}) RENAME({Permutation}  {Permutations}),
bc6c8c1ec4f3bcfbd0ce986f32fcdc7aea61b145,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method solveRecurrence(long[]  long[]  long  long) at LinearAlgebra/LinearRecurrenceSolver.java:96}	{Method solveRecurrence(long[]  long  long  long) at LinearAlgebra/LinearRecurrenceSolver.java:96}) CHANGE_SIGNATURE({LinearRecurrenceSolver solveRecurrence(long[]  long[]  long  long)}  {LinearRecurrenceSolver solveRecurrence(long[]  long  long  long)}),
3863bdaba98bfc962b4d81273bdd41d4dd7cd934,RENAME, RENAME	{Method rangeQuery(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTree.java:97}	{Method rangeQuery1(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTree.java:83}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTree rangeQuery(int  int  int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTree rangeQuery1(int  int  int  int  int)}),
14021b5888ee3be3f0e7e21a55682f339f18092b,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dfs(int  int[]  List) at GraphTheory/EulerianPathDirectedEdgesAdjacencyList.java:18}	{Method dfs(int  int  int[]  List) at GraphTheory/EulerianPathDirectedEdgesAdjacencyList.java:19}) CHANGE_SIGNATURE({EulerianPathDirectedEdgesAdjacencyList dfs(int  int[]  List)}  {EulerianPathDirectedEdgesAdjacencyList dfs(int  int  int[]  List)}),
238a109f44068eaf8004f0595ab695cb284cabbc,MOVE_RENAME, MOVE_RENAME	{Method rangeUpdate2(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:366}	{Method rangeUpdate1(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryMultiplicationUpdateSegmentTree.java:150}) MOVE_RENAME({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeUpdate2(int  int  int  int  int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQueryMultiplicationUpdateSegmentTree rangeUpdate1(int  int  int  int  int  long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,EXTRACT, EXTRACT	{Method rangeUpdate1(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:319}	{Method propagateLazy1(int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:267}) EXTRACT({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeUpdate1(int  int  int  int  int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree propagateLazy1(int  int  int  long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,RENAME, RENAME	{Method rangeQuery(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:173}	{Method rangeQuery1(int  int  int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:229}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeQuery(int  int  int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeQuery1(int  int  int  int  int)}),
238a109f44068eaf8004f0595ab695cb284cabbc,EXTRACT, EXTRACT	{Method propagate1(int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTree.java:116}	{Method sumRangeUpdateAssignFn(long  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTree.java:35}) EXTRACT({com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTree propagate1(int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTree sumRangeUpdateAssignFn(long  int  int  long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,RENAME, RENAME	{Method function(Long  Long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTree.java:27}	{Method sumCombinationFn(Long  Long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTree.java:26}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTree function(Long  Long)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTree sumCombinationFn(Long  Long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,EXTRACT, EXTRACT	{Method rangeUpdate1(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/MinQuerySumUpdateSegmentTree.java:138}	{Method minSegmentUpdateFn(long  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/MinQuerySumUpdateSegmentTree.java:40}) EXTRACT({com.williamfiset.algorithms.datastructures.segmenttree.MinQuerySumUpdateSegmentTree rangeUpdate1(int  int  int  int  int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.MinQuerySumUpdateSegmentTree minSegmentUpdateFn(long  int  int  long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,RENAME, RENAME	{Method rangeQuery(int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:153}	{Method rangeQuery1(int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:219}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeQuery(int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeQuery1(int  int)}),
238a109f44068eaf8004f0595ab695cb284cabbc,EXTRACT_MOVE, EXTRACT_MOVE	{Method rangeUpdate2(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:366}	{Method propagateLazy(int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryMultiplicationUpdateSegmentTree.java:132}) EXTRACT_MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeUpdate2(int  int  int  int  int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQueryMultiplicationUpdateSegmentTree propagateLazy(int  int  int  long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,EXTRACT, EXTRACT	{Method propagate1(int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQuerySumUpdateSegmentTree.java:112}	{Method propagateLazy(int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQuerySumUpdateSegmentTree.java:112}) EXTRACT({com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTree propagate1(int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTree propagateLazy(int  int  int  long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,EXTRACT, EXTRACT	{Method rangeUpdate1(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTree.java:131}	{Method sumRangeUpdateAssignFn(long  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQueryAssignUpdateSegmentTree.java:35}) EXTRACT({com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTree rangeUpdate1(int  int  int  int  int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTree sumRangeUpdateAssignFn(long  int  int  long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,MOVE_RENAME, MOVE_RENAME	{Method rangeQuery2(int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:163}	{Method rangeQuery1(int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/MaxQuerySumUpdateSegmentTree.java:82}) MOVE_RENAME({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree rangeQuery2(int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.MaxQuerySumUpdateSegmentTree rangeQuery1(int  int)}),
238a109f44068eaf8004f0595ab695cb284cabbc,EXTRACT, EXTRACT	{Method propagate1(int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/MinQuerySumUpdateSegmentTree.java:126}	{Method minSegmentUpdateFn(long  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/MinQuerySumUpdateSegmentTree.java:40}) EXTRACT({com.williamfiset.algorithms.datastructures.segmenttree.MinQuerySumUpdateSegmentTree propagate1(int  int  int)}  {com.williamfiset.algorithms.datastructures.segmenttree.MinQuerySumUpdateSegmentTree minSegmentUpdateFn(long  int  int  long)}),
238a109f44068eaf8004f0595ab695cb284cabbc,EXTRACT, EXTRACT	{Method rangeUpdate1(int  int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQuerySumUpdateSegmentTree.java:127}	{Method propagateLazy(int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQuerySumUpdateSegmentTree.java:112}) EXTRACT({com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTree rangeUpdate1(int  int  int  int  int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTree propagateLazy(int  int  int  long)}),
9fdb736f43e9c2f587957ac83c48aecadd7250d6,EXTRACT, EXTRACT	{Method getEulerianPath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:34}	{Method graphHasEulerianPath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:53}) EXTRACT({com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList getEulerianPath()}  {com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList graphHasEulerianPath()}),
9fdb736f43e9c2f587957ac83c48aecadd7250d6,EXTRACT, EXTRACT	{Method getEulerianPath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:34}	{Method setUp() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:22}) EXTRACT({com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList getEulerianPath()}  {com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList setUp()}),
9fdb736f43e9c2f587957ac83c48aecadd7250d6,EXTRACT, EXTRACT	{Method getEulerianPath() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:34}	{Method graphIsConnected() at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:70}) EXTRACT({com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList getEulerianPath()}  {com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList graphIsConnected()}),
ec3b338e38f2641ba00d521ceedc32ae2fe0ec0d,RENAME, RENAME	{Method getPath(int  int) at GraphTheory/FloydWarshallSolver.java:59}	{Method reconstructShortestPath(int  int) at GraphTheory/FloydWarshallSolver.java:59}) RENAME({FloydWarshallSolver getPath(int  int)}  {FloydWarshallSolver reconstructShortestPath(int  int)}),
f1498e56d5178b9417dd98b3e759938297123f2a,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyList.java:80}	{Method testExample2() at com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyList.java:129}) EXTRACT({com.williamfiset.algorithms.graphtheory.ArticulationPointsAdjacencyList main(String[])}  {com.williamfiset.algorithms.graphtheory.ArticulationPointsAdjacencyList testExample2()}),
88e5f23c3195058238a421d728131695fe81b8f8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method sumQuery(int[]  int  int  int) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:35}	{Method sumQuery(long[]  int  int  long) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:34}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest sumQuery(int[]  int  int  int)}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest sumQuery(long[]  int  int  long)}),
88e5f23c3195058238a421d728131695fe81b8f8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method testAllOperations(int[]) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:42}	{Method testAllOperations(long[]) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:52}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest testAllOperations(int[])}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest testAllOperations(long[])}),
88e5f23c3195058238a421d728131695fe81b8f8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method queryResultTest(int[]  int  int  int  SparseTable.Operation) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:11}	{Method queryResultTest(long[]  int  int  long  SparseTable.Operation) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:10}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest queryResultTest(int[]  int  int  int  SparseTable.Operation)}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest queryResultTest(long[]  int  int  long  SparseTable.Operation)}),
88e5f23c3195058238a421d728131695fe81b8f8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method init(int[]) at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java:51}	{Method init(long[]) at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java:57}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTable init(int[])}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTable init(long[])}),
88e5f23c3195058238a421d728131695fe81b8f8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method minQuery(int[]  int  int  int) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:21}	{Method minQuery(long[]  int  int  long) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:22}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest minQuery(int[]  int  int  int)}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest minQuery(long[]  int  int  long)}),
88e5f23c3195058238a421d728131695fe81b8f8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method maxQuery(int[]  int  int  int) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:28}	{Method maxQuery(long[]  int  int  long) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:28}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest maxQuery(int[]  int  int  int)}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest maxQuery(long[]  int  int  long)}),
88e5f23c3195058238a421d728131695fe81b8f8,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int[]  Operation) at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java:46}	{Method new(long[]  Operation) at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java:52}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTable new(int[]  Operation)}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTable new(long[]  Operation)}),
69ab87ba466d832f2602766c7a9116bcd6ea4bec,EXTRACT_MOVE, EXTRACT_MOVE	{Method bfs() at com/williamfiset/algorithms/graphtheory/networkflow/examples/EdmondsKarpExample.java:185}	{Method visited(int) at com/williamfiset/algorithms/graphtheory/networkflow/examples/EdmondsKarpExample.java:154}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.examples.EdmondsKarpExample EdmondsKarpSolver bfs()}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.EdmondsKarpExample NetworkFlowSolverBase visited(int)}),
69ab87ba466d832f2602766c7a9116bcd6ea4bec,EXTRACT_MOVE, EXTRACT_MOVE	{Method bfs() at com/williamfiset/algorithms/graphtheory/networkflow/examples/EdmondsKarpExample.java:185}	{Method visit(int) at com/williamfiset/algorithms/graphtheory/networkflow/examples/EdmondsKarpExample.java:149}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.examples.EdmondsKarpExample EdmondsKarpSolver bfs()}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.EdmondsKarpExample NetworkFlowSolverBase visit(int)}),
69ab87ba466d832f2602766c7a9116bcd6ea4bec,EXTRACT_MOVE, EXTRACT_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/examples/EdmondsKarpExample.java:175}	{Method markAllNodesAsUnvisited() at com/williamfiset/algorithms/graphtheory/networkflow/examples/EdmondsKarpExample.java:160}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.examples.EdmondsKarpExample EdmondsKarpSolver solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.EdmondsKarpExample NetworkFlowSolverBase markAllNodesAsUnvisited()}),
a67ddd32652c8673e32f699858feed476b5f7000,RENAME, RENAME	{Method testAgainstBruteForce() at javatests/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingTest.java:117}	{Method testAgainstBruteForce_largeValues() at javatests/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingTest.java:114}) RENAME({javatests.com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingTest testAgainstBruteForce()}  {javatests.com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingTest testAgainstBruteForce_largeValues()}),
a67ddd32652c8673e32f699858feed476b5f7000,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method randomFillSymmetricMatrix(double[][]) at javatests/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingTest.java:132}	{Method randomFillSymmetricMatrix(double[][]  int) at javatests/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingTest.java:145}) CHANGE_SIGNATURE({javatests.com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingTest randomFillSymmetricMatrix(double[][])}  {javatests.com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingTest randomFillSymmetricMatrix(double[][]  int)}),
92f114cf9413a39278acec2b18d305c58a1e33b6,MOVE, MOVE	{Class FibonacciHeap at src/main/java/com/williamfiset/algorithms/datastructures/fibonacci_heap/Fibonacci.java:16}	{Class FibonacciHeap at src/main/java/com/williamfiset/algorithms/datastructures/fibonacciheap/FibonacciHeap.java:22}) MOVE({FibonacciHeap}  {com.williamfiset.algorithms.datastructures.fibonacciheap.FibonacciHeap}),
473b2de5d3b0b9f2325b6d8f0678adc1b0610182,EXTRACT, EXTRACT	{Method main(String[]) at Geometry/LineCircleIntersection.java:73}	{Method display(Point2D[]) at Geometry/LineCircleIntersection.java:87}) EXTRACT({LineCircleIntersection main(String[])}  {LineCircleIntersection display(Point2D[])}),
d0058c5c23eed3b33eed33d957c65d27b7746521,MOVE, MOVE	{Method testSumQueryAssignUpdate_simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:64}	{Method testSumQueryAssignUpdate_simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2Test.java:64}) MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest testSumQueryAssignUpdate_simple()}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test testSumQueryAssignUpdate_simple()}),
d0058c5c23eed3b33eed33d957c65d27b7746521,MOVE, MOVE	{Method setup() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:18}	{Method setup() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2Test.java:18}) MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest setup()}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test setup()}),
d0058c5c23eed3b33eed33d957c65d27b7746521,MOVE, MOVE	{Method testSumQuerySumUpdate_Simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:21}	{Method testSumQuerySumUpdate_Simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2Test.java:21}) MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest testSumQuerySumUpdate_Simple()}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test testSumQuerySumUpdate_Simple()}),
d0058c5c23eed3b33eed33d957c65d27b7746521,MOVE, MOVE	{Method maxQueryMulUpdate_simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:203}	{Method maxQueryMulUpdate_simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2Test.java:207}) MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest maxQueryMulUpdate_simple()}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test maxQueryMulUpdate_simple()}),
d0058c5c23eed3b33eed33d957c65d27b7746521,MOVE, MOVE	{Method testSumQuerySumUpdate_RangeUpdate() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:35}	{Method testSumQuerySumUpdate_RangeUpdate() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2Test.java:35}) MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest testSumQuerySumUpdate_RangeUpdate()}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test testSumQuerySumUpdate_RangeUpdate()}),
d0058c5c23eed3b33eed33d957c65d27b7746521,MOVE, MOVE	{Method testAllFunctionCombinations() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:220}	{Method testAllFunctionCombinations() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2Test.java:224}) MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest testAllFunctionCombinations()}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test testAllFunctionCombinations()}),
d0058c5c23eed3b33eed33d957c65d27b7746521,MOVE, MOVE	{Method minQuerySumUpdates_simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:121}	{Method minQuerySumUpdates_simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2Test.java:121}) MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest minQuerySumUpdates_simple()}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test minQuerySumUpdates_simple()}),
d0058c5c23eed3b33eed33d957c65d27b7746521,MOVE, MOVE	{Method testSumQueryMulUpdate_simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:101}	{Method testSumQueryMulUpdate_simple() at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree2Test.java:101}) MOVE({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest testSumQueryMulUpdate_simple()}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test testSumQueryMulUpdate_simple()}),
b7e7e1cba20921e94efaf8603861b364b8944aeb,RENAME, RENAME	{Class NetworkFlowBase at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:11}	{Class NetworkFlowSolverBase at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:11}) RENAME({com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase}),
b7e7e1cba20921e94efaf8603861b364b8944aeb,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method bfs(List[]  boolean[]  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:81}	{Method bfs() at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:45}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyList bfs(List[]  boolean[]  int  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyList bfs()}),
b7e7e1cba20921e94efaf8603861b364b8944aeb,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowBase.java:19}	{Method new(int  int  long) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:20}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowBase Edge new(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase Edge new(int  int  long)}),
b336c50920e94165e2fc72ac5040336eac97335f,RENAME, RENAME	{Method testInvalidStartNode() at GraphTheory/tests/TravelingSalesmanProblemTest.java:10}	{Method testTspRecursiveInvalidStartNode() at GraphTheory/tests/TravelingSalesmanProblemTest.java:10}) RENAME({TravelingSalesmanProblemTest testInvalidStartNode()}  {TravelingSalesmanProblemTest testTspRecursiveInvalidStartNode()}),
b336c50920e94165e2fc72ac5040336eac97335f,RENAME, RENAME	{Method testNonSquareMatrix() at GraphTheory/tests/TravelingSalesmanProblemTest.java:20}	{Method testTspRecursiveNonSquareMatrix() at GraphTheory/tests/TravelingSalesmanProblemTest.java:30}) RENAME({TravelingSalesmanProblemTest testNonSquareMatrix()}  {TravelingSalesmanProblemTest testTspRecursiveNonSquareMatrix()}),
b336c50920e94165e2fc72ac5040336eac97335f,RENAME, RENAME	{Class TspDynamicProgramming at GraphTheory/TspDynamicProgramming.java:19}	{Class TspDynamicProgrammingRecursive at GraphTheory/TspDynamicProgrammingRecursive.java:19}) RENAME({TspDynamicProgramming}  {TspDynamicProgrammingRecursive}),
b336c50920e94165e2fc72ac5040336eac97335f,RENAME, RENAME	{Method testPerformance() at GraphTheory/tests/TravelingSalesmanProblemTest.java:113}	{Method testTspRecursivePerformance() at GraphTheory/tests/TravelingSalesmanProblemTest.java:140}) RENAME({TravelingSalesmanProblemTest testPerformance()}  {TravelingSalesmanProblemTest testTspRecursivePerformance()}),
b336c50920e94165e2fc72ac5040336eac97335f,RENAME, RENAME	{Method testSmallGraph() at GraphTheory/tests/TravelingSalesmanProblemTest.java:29}	{Method testTspRecursiveSmallGraph() at GraphTheory/tests/TravelingSalesmanProblemTest.java:48}) RENAME({TravelingSalesmanProblemTest testSmallGraph()}  {TravelingSalesmanProblemTest testTspRecursiveSmallGraph()}),
ec642ff7007e600d3d2651cb0cec00e61c68a22c,EXTRACT, EXTRACT	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/sorting/Heapsort.java:57}	{Method sort(int[]) at src/main/java/com/williamfiset/algorithms/sorting/Heapsort.java:16}) EXTRACT({com.williamfiset.algorithms.sorting.Heapsort main(String[])}  {com.williamfiset.algorithms.sorting.Heapsort sort(int[])}),
ec642ff7007e600d3d2651cb0cec00e61c68a22c,MOVE, MOVE	{Method main(String[]) at src/test/java/com/williamfiset/algorithms/sorting/Main.java:6}	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/sorting/RadixSort.java:72}) MOVE({com.williamfiset.algorithms.sorting.Main main(String[])}  {com.williamfiset.algorithms.sorting.RadixSort main(String[])}),
ec642ff7007e600d3d2651cb0cec00e61c68a22c,RENAME, RENAME	{Class Quicksort at src/main/java/com/williamfiset/algorithms/sorting/Quicksort.java:10}	{Class QuickSort at src/main/java/com/williamfiset/algorithms/sorting/Quicksort.java:14}) RENAME({com.williamfiset.algorithms.sorting.Quicksort}  {com.williamfiset.algorithms.sorting.QuickSort}),
ec642ff7007e600d3d2651cb0cec00e61c68a22c,RENAME, RENAME	{Class Mergesort at src/main/java/com/williamfiset/algorithms/sorting/Mergesort.java:11}	{Class MergeSort at src/main/java/com/williamfiset/algorithms/sorting/Mergesort.java:17}) RENAME({com.williamfiset.algorithms.sorting.Mergesort}  {com.williamfiset.algorithms.sorting.MergeSort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CompressedPrimeSieve at Math/CompressedPrimeSieve.java:1}	{Class CompressedPrimeSieve at com/williamfiset/algorithms/math/CompressedPrimeSieve.java:16}) MOVE({CompressedPrimeSieve}  {com.williamfiset.algorithms.math.CompressedPrimeSieve}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LongestPalindromeSubsequence at DynamicProgramming/LongestPalindromeSubsequence.java:1}	{Class LongestPalindromeSubsequence at com/williamfiset/algorithms/dp/LongestPalindromeSubsequence.java:8}) MOVE({LongestPalindromeSubsequence}  {com.williamfiset.algorithms.dp.LongestPalindromeSubsequence}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class DepthFirstSearchAdjacencyListIterativeFastStack at GraphTheory/DepthFirstSearchAdjacencyListIterativeFastStack.java:40}	{Class DepthFirstSearchAdjacencyListIterativeFastStack at com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListIterativeFastStack.java:41}) MOVE({DepthFirstSearchAdjacencyListIterativeFastStack}  {com.williamfiset.algorithms.graphtheory.DepthFirstSearchAdjacencyListIterativeFastStack}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BridgesAdjacencyListIterative at GraphTheory/BridgesAdjacencyListIterative.java:13}	{Class BridgesAdjacencyListIterative at com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListIterative.java:14}) MOVE({BridgesAdjacencyListIterative}  {com.williamfiset.algorithms.graphtheory.BridgesAdjacencyListIterative}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ManachersAlgorithm at StringAlgorithms/ManachersAlgorithm.java:1}	{Class ManachersAlgorithm at com/williamfiset/algorithms/strings/ManachersAlgorithm.java:8}) MOVE({ManachersAlgorithm}  {com.williamfiset.algorithms.strings.ManachersAlgorithm}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TernarySearch at SearchAlgorithms/TernarySearch.java:20}	{Class TernarySearch at com/williamfiset/algorithms/search/TernarySearch.java:20}) MOVE({TernarySearch}  {com.williamfiset.algorithms.search.TernarySearch}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class FreivaldsAlgorithm at LinearAlgebra/FreivaldsAlgorithm.java:1}	{Class FreivaldsAlgorithm at com/williamfiset/algorithms/linearalgebra/FreivaldsAlgorithm.java:14}) MOVE({FreivaldsAlgorithm}  {com.williamfiset.algorithms.linearalgebra.FreivaldsAlgorithm}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class Heapsort at SortingAlgorithms/Heapsort.java:8}	{Class Heapsort at com/williamfiset/algorithms/sorting/Heapsort.java:9}) MOVE({Heapsort}  {com.williamfiset.algorithms.sorting.Heapsort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class JosephusProblem at DynamicProgramming/JosephusProblem.java:1}	{Class JosephusProblem at com/williamfiset/algorithms/dp/JosephusProblem.java:8}) MOVE({JosephusProblem}  {com.williamfiset.algorithms.dp.JosephusProblem}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CombinationsWithRepetition at ConstructiveAlgorithms/CombinationsWithRepetition.java:1}	{Class CombinationsWithRepetition at com/williamfiset/algorithms/other/CombinationsWithRepetition.java:11}) MOVE({CombinationsWithRepetition}  {com.williamfiset.algorithms.other.CombinationsWithRepetition}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LazyPrimsAdjacencyMatrix at GraphTheory/LazyPrimsAdjacencyMatrix.java:13}	{Class LazyPrimsAdjacencyMatrix at com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyMatrix.java:14}) MOVE({LazyPrimsAdjacencyMatrix}  {com.williamfiset.algorithms.graphtheory.LazyPrimsAdjacencyMatrix}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LongestCommonSubsequence at DynamicProgramming/LongestCommonSubsequence.java:1}	{Class LongestCommonSubsequence at com/williamfiset/algorithms/dp/LongestCommonSubsequence.java:11}) MOVE({LongestCommonSubsequence}  {com.williamfiset.algorithms.dp.LongestCommonSubsequence}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TwoSatSolverAdjacencyList at GraphTheory/TwoSatSolverAdjacencyList.java:7}	{Class TwoSatSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/TwoSatSolverAdjacencyList.java:8}) MOVE({TwoSatSolverAdjacencyList}  {com.williamfiset.algorithms.graphtheory.TwoSatSolverAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class FFT at Math/FastFourierTransform.java:1}	{Class FFT at com/williamfiset/algorithms/math/FastFourierTransform.java:12}) MOVE({FFT}  {com.williamfiset.algorithms.math.FFT}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TarjanSccSolverAdjacencyList at GraphTheory/TarjanSccSolverAdjacencyList.java:12}	{Class TarjanSccSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/TarjanSccSolverAdjacencyList.java:13}) MOVE({TarjanSccSolverAdjacencyList}  {com.williamfiset.algorithms.graphtheory.TarjanSccSolverAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class DepthFirstSearchAdjacencyListRecursive at GraphTheory/DepthFirstSearchAdjacencyListRecursive.java:11}	{Class DepthFirstSearchAdjacencyListRecursive at com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListRecursive.java:11}) MOVE({DepthFirstSearchAdjacencyListRecursive}  {com.williamfiset.algorithms.graphtheory.DepthFirstSearchAdjacencyListRecursive}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TreeCanonicalFormAdjacencyList at GraphTheory/TreeAlgorithms/TreeCanonicalFormAdjacencyList.java:18}	{Class TreeCanonicalFormAdjacencyList at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList.java:19}) MOVE({TreeCanonicalFormAdjacencyList}  {com.williamfiset.algorithms.graphtheory.TreeCanonicalFormAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class GeneticAlgorithm_travelingSalesman at AI/GeneticAlgorithm_travelingSalesman.java:11}	{Class GeneticAlgorithm_travelingSalesman at com/williamfiset/algorithms/ai/GeneticAlgorithm_travelingSalesman.java:12}) MOVE({GeneticAlgorithm_travelingSalesman}  {com.williamfiset.algorithms.ai.GeneticAlgorithm_travelingSalesman}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class PointInsideTriangle at Geometry/PointInsideTriangle.java:13}	{Class PointInsideTriangle at com/williamfiset/algorithms/geometry/PointInsideTriangle.java:14}) MOVE({PointInsideTriangle}  {com.williamfiset.algorithms.geometry.PointInsideTriangle}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BitManipulations at Other/BitManipulations.java:1}	{Class BitManipulations at com/williamfiset/algorithms/other/BitManipulations.java:8}) MOVE({BitManipulations}  {com.williamfiset.algorithms.other.BitManipulations}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class SieveOfEratosthenes at Math/SieveOfEratosthenes.java:1}	{Class SieveOfEratosthenes at com/williamfiset/algorithms/math/SieveOfEratosthenes.java:11}) MOVE({SieveOfEratosthenes}  {com.williamfiset.algorithms.math.SieveOfEratosthenes}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LongitudeLatitudeGeographicDistance at Geometry/LongitudeLatitudeGeographicDistance.java:11}	{Class LongitudeLatitudeGeographicDistance at com/williamfiset/algorithms/geometry/LongitudeLatitudeGeographicDistance.java:12}) MOVE({LongitudeLatitudeGeographicDistance}  {com.williamfiset.algorithms.geometry.LongitudeLatitudeGeographicDistance}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CoinChangeTest at DynamicProgramming/tests/CoinChangeTest.java:7}	{Class CoinChangeTest at javatests/com/williamfiset/algorithms/dp/CoinChangeTest.java:12}) MOVE({CoinChangeTest}  {javatests.com.williamfiset.algorithms.dp.CoinChangeTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class Quicksort at SortingAlgorithms/Quicksort.java:9}	{Class Quicksort at com/williamfiset/algorithms/sorting/Quicksort.java:10}) MOVE({Quicksort}  {com.williamfiset.algorithms.sorting.Quicksort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BreadthFirstSearchAdjacencyListIterativeFastQueue at GraphTheory/BreadthFirstSearchAdjacencyListIterativeFastQueue.java:52}	{Class BreadthFirstSearchAdjacencyListIterativeFastQueue at com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterativeFastQueue.java:53}) MOVE({BreadthFirstSearchAdjacencyListIterativeFastQueue}  {com.williamfiset.algorithms.graphtheory.BreadthFirstSearchAdjacencyListIterativeFastQueue}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ChineseRemainderTheorem at Math/ChineseRemainderTheorem.java:25}	{Class ChineseRemainderTheorem at com/williamfiset/algorithms/math/ChineseRemainderTheorem.java:26}) MOVE({ChineseRemainderTheorem}  {com.williamfiset.algorithms.math.ChineseRemainderTheorem}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CountingSort at SortingAlgorithms/CountingSort.java:1}	{Class CountingSort at com/williamfiset/algorithms/sorting/CountingSort.java:7}) MOVE({CountingSort}  {com.williamfiset.algorithms.sorting.CountingSort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class GeneticAlgorithm_knapsack_01 at AI/GeneticAlgorithm_knapsack_01.java:13}	{Class GeneticAlgorithm_knapsack_01 at com/williamfiset/algorithms/ai/GeneticAlgorithm_knapsack_01.java:14}) MOVE({GeneticAlgorithm_knapsack_01}  {com.williamfiset.algorithms.ai.GeneticAlgorithm_knapsack_01}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ClosestPairOfPoints at Geometry/ClosestPairOfPoints.java:26}	{Class ClosestPairOfPoints at com/williamfiset/algorithms/geometry/ClosestPairOfPoints.java:27}) MOVE({ClosestPairOfPoints}  {com.williamfiset.algorithms.geometry.ClosestPairOfPoints}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class SlidingWindowMaximum at Other/SlidingWindowMaximum.java:13}	{Class SlidingWindowMaximum at com/williamfiset/algorithms/other/SlidingWindowMaximum.java:14}) MOVE({SlidingWindowMaximum}  {com.williamfiset.algorithms.other.SlidingWindowMaximum}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class SubstringVerificationSuffixArray at StringAlgorithms/SubstringVerificationSuffixArray.java:18}	{Class SubstringVerificationSuffixArray at com/williamfiset/algorithms/strings/SubstringVerificationSuffixArray.java:19}) MOVE({SubstringVerificationSuffixArray}  {com.williamfiset.algorithms.strings.SubstringVerificationSuffixArray}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class Permutations at ConstructiveAlgorithms/Permutations.java:1}	{Class Permutations at com/williamfiset/algorithms/other/Permutations.java:11}) MOVE({Permutations}  {com.williamfiset.algorithms.other.Permutations}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LinearRecurrenceSolver at LinearAlgebra/LinearRecurrenceSolver.java:1}	{Class LinearRecurrenceSolver at com/williamfiset/algorithms/linearalgebra/LinearRecurrenceSolver.java:20}) MOVE({LinearRecurrenceSolver}  {com.williamfiset.algorithms.linearalgebra.LinearRecurrenceSolver}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class FordFulkersonDFSAdjacencyList at GraphTheory/NetworkFlow/FordFulkersonDFSAdjacencyList.java:13}	{Class FordFulkersonDFSAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyList.java:14}) MOVE({FordFulkersonDFSAdjacencyList}  {com.williamfiset.algorithms.graphtheory.FordFulkersonDFSAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LineSegmentLineSegmentIntersection at Geometry/LineSegmentLineSegmentIntersection.java:21}	{Class LineSegmentLineSegmentIntersection at com/williamfiset/algorithms/geometry/LineSegmentLineSegmentIntersection.java:22}) MOVE({LineSegmentLineSegmentIntersection}  {com.williamfiset.algorithms.geometry.LineSegmentLineSegmentIntersection}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class Simplex at LinearAlgebra/Simplex.java:1}	{Class Simplex at com/williamfiset/algorithms/linearalgebra/Simplex.java:10}) MOVE({Simplex}  {com.williamfiset.algorithms.linearalgebra.Simplex}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BridgesAdjacencyListTest at GraphTheory/tests/BridgesAdjacencyListTest.java:8}	{Class BridgesAdjacencyListTest at javatests/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListTest.java:10}) MOVE({BridgesAdjacencyListTest}  {javatests.com.williamfiset.algorithms.graphtheory.BridgesAdjacencyListTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TspBruteForce at GraphTheory/TspBruteForce.java:1}	{Class TspBruteForce at com/williamfiset/algorithms/graphtheory/TspBruteForce.java:13}) MOVE({TspBruteForce}  {com.williamfiset.algorithms.graphtheory.TspBruteForce}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TopologicalSortAdjacencyMatrix at GraphTheory/TopologicalSortAdjacencyMatrix.java:1}	{Class TopologicalSortAdjacencyMatrix at com/williamfiset/algorithms/graphtheory/TopologicalSortAdjacencyMatrix.java:14}) MOVE({TopologicalSortAdjacencyMatrix}  {com.williamfiset.algorithms.graphtheory.TopologicalSortAdjacencyMatrix}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ModPow at Math/ModPow.java:1}	{Class ModPow at com/williamfiset/algorithms/math/ModPow.java:16}) MOVE({ModPow}  {com.williamfiset.algorithms.math.ModPow}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class FordFulkersonDFSAdjacencyMatrix at GraphTheory/NetworkFlow/FordFulkersonDFSAdjacencyMatrix.java:1}	{Class FordFulkersonDFSAdjacencyMatrix at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyMatrix.java:13}) MOVE({FordFulkersonDFSAdjacencyMatrix}  {com.williamfiset.algorithms.graphtheory.FordFulkersonDFSAdjacencyMatrix}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LongestRepeatedSubstring at StringAlgorithms/LongestRepeatedSubstring.java:11}	{Class LongestRepeatedSubstring at com/williamfiset/algorithms/strings/LongestRepeatedSubstring.java:12}) MOVE({LongestRepeatedSubstring}  {com.williamfiset.algorithms.strings.LongestRepeatedSubstring}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ModularInverse at Math/ModularInverse.java:1}	{Class ModularInverse at com/williamfiset/algorithms/math/ModularInverse.java:6}) MOVE({ModularInverse}  {com.williamfiset.algorithms.math.ModularInverse}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BreadthFirstSearchAdjacencyListIterative at GraphTheory/BreadthFirstSearchAdjacencyListIterative.java:15}	{Class BreadthFirstSearchAdjacencyListIterative at com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterative.java:16}) MOVE({BreadthFirstSearchAdjacencyListIterative}  {com.williamfiset.algorithms.graphtheory.BreadthFirstSearchAdjacencyListIterative}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BinarySearch at SearchAlgorithms/BinarySearch.java:14}	{Class BinarySearch at com/williamfiset/algorithms/search/BinarySearch.java:15}) MOVE({BinarySearch}  {com.williamfiset.algorithms.search.BinarySearch}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TwoSatSolverAdjacencyListTest at GraphTheory/tests/TwoSatSolverAdjacencyListTest.java:8}	{Class TwoSatSolverAdjacencyListTest at javatests/com/williamfiset/algorithms/graphtheory/TwoSatSolverAdjacencyListTest.java:10}) MOVE({TwoSatSolverAdjacencyListTest}  {javatests.com.williamfiset.algorithms.graphtheory.TwoSatSolverAdjacencyListTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class PointCircleTangent at Geometry/PointCircleTangent.java:15}	{Class PointCircleTangent at com/williamfiset/algorithms/geometry/PointCircleTangent.java:16}) MOVE({PointCircleTangent}  {com.williamfiset.algorithms.geometry.PointCircleTangent}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LineSegmentToGeneralForm at Geometry/LineSegmentToGeneralForm.java:1}	{Class LineSegmentToGeneralForm at com/williamfiset/algorithms/geometry/LineSegmentToGeneralForm.java:11}) MOVE({LineSegmentToGeneralForm}  {com.williamfiset.algorithms.geometry.LineSegmentToGeneralForm}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ConvexPolygonArea at Geometry/ConvexPolygonArea.java:12}	{Class ConvexPolygonArea at com/williamfiset/algorithms/geometry/ConvexPolygonArea.java:13}) MOVE({ConvexPolygonArea}  {com.williamfiset.algorithms.geometry.ConvexPolygonArea}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class PowerSet at ConstructiveAlgorithms/PowerSet.java:1}	{Class PowerSet at com/williamfiset/algorithms/other/PowerSet.java:13}) MOVE({PowerSet}  {com.williamfiset.algorithms.other.PowerSet}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class AngleBetweenVectors2D at Geometry/AngleBetweenVectors2D.java:12}	{Class AngleBetweenVectors2D at com/williamfiset/algorithms/geometry/AngleBetweenVectors2D.java:13}) MOVE({AngleBetweenVectors2D}  {com.williamfiset.algorithms.geometry.AngleBetweenVectors2D}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ModularLinearAlgebra at LinearAlgebra/ModularLinearAlgebra.java:1}	{Class ModularLinearAlgebra at com/williamfiset/algorithms/linearalgebra/ModularLinearAlgebra.java:7}) MOVE({ModularLinearAlgebra}  {com.williamfiset.algorithms.linearalgebra.ModularLinearAlgebra}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CircularSegmentArea at Geometry/CircularSegmentArea.java:12}	{Class CircularSegmentArea at com/williamfiset/algorithms/geometry/CircularSegmentArea.java:14}) MOVE({CircularSegmentArea}  {com.williamfiset.algorithms.geometry.CircularSegmentArea}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class IntQueue at GraphTheory/BreadthFirstSearchAdjacencyListIterativeFastQueue.java:15}	{Class IntQueue at com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterativeFastQueue.java:16}) MOVE({IntQueue}  {com.williamfiset.algorithms.graphtheory.IntQueue}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class Knapsack_01 at DynamicProgramming/Knapsack_01.java:1}	{Class Knapsack_01 at com/williamfiset/algorithms/dp/Knapsack_01.java:16}) MOVE({Knapsack_01}  {com.williamfiset.algorithms.dp.Knapsack_01}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BellmanFordAdjacencyMatrix at GraphTheory/BellmanFordAdjacencyMatrix.java:12}	{Class BellmanFordAdjacencyMatrix at com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyMatrix.java:13}) MOVE({BellmanFordAdjacencyMatrix}  {com.williamfiset.algorithms.graphtheory.BellmanFordAdjacencyMatrix}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ArticulationPointsAdjacencyListTest at GraphTheory/tests/ArticulationPointsAdjacencyListTest.java:8}	{Class ArticulationPointsAdjacencyListTest at javatests/com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyListTest.java:10}) MOVE({ArticulationPointsAdjacencyListTest}  {javatests.com.williamfiset.algorithms.graphtheory.ArticulationPointsAdjacencyListTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CoplanarPointsTest at Geometry/CoplanarPointsTest.java:12}	{Class CoplanarPointsTest at com/williamfiset/algorithms/geometry/CoplanarPointsTest.java:13}) MOVE({CoplanarPointsTest}  {com.williamfiset.algorithms.geometry.CoplanarPointsTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TspDynamicProgrammingIterative at GraphTheory/TspDynamicProgrammingIterative.java:15}	{Class TspDynamicProgrammingIterative at com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingIterative.java:16}) MOVE({TspDynamicProgrammingIterative}  {com.williamfiset.algorithms.graphtheory.TspDynamicProgrammingIterative}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class IsPrime at Math/IsPrime.java:1}	{Class IsPrime at com/williamfiset/algorithms/math/IsPrime.java:8}) MOVE({IsPrime}  {com.williamfiset.algorithms.math.IsPrime}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TarjanSccSolverAdjacencyListTest at GraphTheory/tests/TarjanSccSolverAdjacencyListTest.java:7}	{Class TarjanSccSolverAdjacencyListTest at javatests/com/williamfiset/algorithms/graphtheory/TarjanSccSolverAdjacencyListTest.java:9}) MOVE({TarjanSccSolverAdjacencyListTest}  {javatests.com.williamfiset.algorithms.graphtheory.TarjanSccSolverAdjacencyListTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class DijkstrasShortestPathAdjacencyList at GraphTheory/DijkstrasShortestPathAdjacencyList.java:14}	{Class DijkstrasShortestPathAdjacencyList at com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyList.java:15}) MOVE({DijkstrasShortestPathAdjacencyList}  {com.williamfiset.algorithms.graphtheory.DijkstrasShortestPathAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class KMP at StringAlgorithms/KMP.java:1}	{Class KMP at com/williamfiset/algorithms/strings/KMP.java:7}) MOVE({KMP}  {com.williamfiset.algorithms.strings.KMP}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TreeDiameter at GraphTheory/TreeAlgorithms/TreeDiameter.java:12}	{Class TreeDiameter at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeDiameter.java:13}) MOVE({TreeDiameter}  {com.williamfiset.algorithms.graphtheory.TreeDiameter}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class SlidingWindowMaximumTest at Other/tests/SlidingWindowMaximumTest.java:5}	{Class SlidingWindowMaximumTest at javatests/com/williamfiset/algorithms/other/SlidingWindowMaximumTest.java:7}) MOVE({SlidingWindowMaximumTest}  {javatests.com.williamfiset.algorithms.other.SlidingWindowMaximumTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LineCircleIntersection at Geometry/LineCircleIntersection.java:13}	{Class LineCircleIntersection at com/williamfiset/algorithms/geometry/LineCircleIntersection.java:14}) MOVE({LineCircleIntersection}  {com.williamfiset.algorithms.geometry.LineCircleIntersection}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ConvexHullMonotoneChainsAlgorithm at Geometry/ConvexHullMonotoneChainsAlgorithm.java:26}	{Class ConvexHullMonotoneChainsAlgorithm at com/williamfiset/algorithms/geometry/ConvexHullMonotoneChainsAlgorithm.java:27}) MOVE({ConvexHullMonotoneChainsAlgorithm}  {com.williamfiset.algorithms.geometry.ConvexHullMonotoneChainsAlgorithm}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ConnectedComponentsAdjacencyList at GraphTheory/ConnectedComponentsAdjacencyList.java:17}	{Class ConnectedComponentsAdjacencyList at com/williamfiset/algorithms/graphtheory/ConnectedComponentsAdjacencyList.java:18}) MOVE({ConnectedComponentsAdjacencyList}  {com.williamfiset.algorithms.graphtheory.ConnectedComponentsAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class InsertionSort at SortingAlgorithms/InsertionSort.java:9}	{Class InsertionSort at com/williamfiset/algorithms/sorting/InsertionSort.java:10}) MOVE({InsertionSort}  {com.williamfiset.algorithms.sorting.InsertionSort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TopologicalSortAdjacencyList at GraphTheory/TopologicalSortAdjacencyList.java:15}	{Class TopologicalSortAdjacencyList at com/williamfiset/algorithms/graphtheory/TopologicalSortAdjacencyList.java:16}) MOVE({TopologicalSortAdjacencyList}  {com.williamfiset.algorithms.graphtheory.TopologicalSortAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CoinChange at DynamicProgramming/CoinChange.java:1}	{Class CoinChange at com/williamfiset/algorithms/dp/CoinChange.java:15}) MOVE({CoinChange}  {com.williamfiset.algorithms.dp.CoinChange}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class EdmondsKarpAdjacencyList at GraphTheory/NetworkFlow/EdmondsKarpAdjacencyList.java:14}	{Class EdmondsKarpAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:15}) MOVE({EdmondsKarpAdjacencyList}  {com.williamfiset.algorithms.graphtheory.EdmondsKarpAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LongestCommonSubstring at StringAlgorithms/LongestCommonSubstring.java:12}	{Class LongestCommonSubstring at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:13}) MOVE({LongestCommonSubstring}  {com.williamfiset.algorithms.strings.LongestCommonSubstring}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class IntStack at GraphTheory/DepthFirstSearchAdjacencyListIterativeFastStack.java:17}	{Class IntStack at com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListIterativeFastStack.java:18}) MOVE({IntStack}  {com.williamfiset.algorithms.graphtheory.IntStack}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class FastFourierTransformComplexNumbers at Math/FastFourierTransformComplexNumbers.java:1}	{Class FastFourierTransformComplexNumbers at com/williamfiset/algorithms/math/FastFourierTransformComplexNumbers.java:9}) MOVE({FastFourierTransformComplexNumbers}  {com.williamfiset.algorithms.math.FastFourierTransformComplexNumbers}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BoothsAlgorithm at StringAlgorithms/BoothsAlgorithm.java:1}	{Class BoothsAlgorithm at com/williamfiset/algorithms/strings/BoothsAlgorithm.java:7}) MOVE({BoothsAlgorithm}  {com.williamfiset.algorithms.strings.BoothsAlgorithm}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class AngleBetweenVectors3D at Geometry/AngleBetweenVectors3D.java:12}	{Class AngleBetweenVectors3D at com/williamfiset/algorithms/geometry/AngleBetweenVectors3D.java:13}) MOVE({AngleBetweenVectors3D}  {com.williamfiset.algorithms.geometry.AngleBetweenVectors3D}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CollinearPoints at Geometry/CollinearPoints.java:13}	{Class CollinearPoints at com/williamfiset/algorithms/geometry/CollinearPoints.java:14}) MOVE({CollinearPoints}  {com.williamfiset.algorithms.geometry.CollinearPoints}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class RelativelyPrime at Math/RelativelyPrime.java:1}	{Class RelativelyPrime at com/williamfiset/algorithms/math/RelativelyPrime.java:10}) MOVE({RelativelyPrime}  {com.williamfiset.algorithms.math.RelativelyPrime}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class PT at Geometry/ClosestPairOfPoints.java:14}	{Class PT at com/williamfiset/algorithms/geometry/ClosestPairOfPoints.java:15}) MOVE({PT}  {com.williamfiset.algorithms.geometry.PT}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class FloydWarshallSolver at GraphTheory/FloydWarshallSolver.java:20}	{Class FloydWarshallSolver at com/williamfiset/algorithms/graphtheory/FloydWarshallSolver.java:21}) MOVE({FloydWarshallSolver}  {com.williamfiset.algorithms.graphtheory.FloydWarshallSolver}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BellmanFordEdgeList at GraphTheory/BellmanFordEdgeList.java:1}	{Class BellmanFordEdgeList at com/williamfiset/algorithms/graphtheory/BellmanFordEdgeList.java:10}) MOVE({BellmanFordEdgeList}  {com.williamfiset.algorithms.graphtheory.BellmanFordEdgeList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class SquareRootDecomposition at Other/SquareRootDecomposition.java:1}	{Class SquareRootDecomposition at com/williamfiset/algorithms/other/SquareRootDecomposition.java:13}) MOVE({SquareRootDecomposition}  {com.williamfiset.algorithms.other.SquareRootDecomposition}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class PrimeFactorization at Math/PrimeFactorization.java:5}	{Class PrimeFactorization at com/williamfiset/algorithms/math/PrimeFactorization.java:6}) MOVE({PrimeFactorization}  {com.williamfiset.algorithms.math.PrimeFactorization}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class PointRotation at Geometry/PointRotation.java:13}	{Class PointRotation at com/williamfiset/algorithms/geometry/PointRotation.java:14}) MOVE({PointRotation}  {com.williamfiset.algorithms.geometry.PointRotation}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class DepthFirstSearchAdjacencyListIterative at GraphTheory/DepthFirstSearchAdjacencyListIterative.java:10}	{Class DepthFirstSearchAdjacencyListIterative at com/williamfiset/algorithms/graphtheory/DepthFirstSearchAdjacencyListIterative.java:11}) MOVE({DepthFirstSearchAdjacencyListIterative}  {com.williamfiset.algorithms.graphtheory.DepthFirstSearchAdjacencyListIterative}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class GraphDiameter at GraphTheory/GraphDiameter.java:14}	{Class GraphDiameter at com/williamfiset/algorithms/graphtheory/GraphDiameter.java:15}) MOVE({GraphDiameter}  {com.williamfiset.algorithms.graphtheory.GraphDiameter}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class RabinKarp at StringAlgorithms/RabinKarp.java:10}	{Class RabinKarp at com/williamfiset/algorithms/strings/RabinKarp.java:10}) MOVE({RabinKarp}  {com.williamfiset.algorithms.strings.RabinKarp}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ConnectedComponentsDfsSolverAdjacencyList at GraphTheory/ConnectedComponentsDfsSolverAdjacencyList.java:11}	{Class ConnectedComponentsDfsSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/ConnectedComponentsDfsSolverAdjacencyList.java:12}) MOVE({ConnectedComponentsDfsSolverAdjacencyList}  {com.williamfiset.algorithms.graphtheory.ConnectedComponentsDfsSolverAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class EulerTotientFunction at Math/EulerTotientFunction.java:4}	{Class EulerTotientFunction at com/williamfiset/algorithms/math/EulerTotientFunction.java:4}) MOVE({EulerTotientFunction}  {com.williamfiset.algorithms.math.EulerTotientFunction}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ConvexHullGrahamScan at Geometry/ConvexHullGrahamScan.java:12}	{Class ConvexHullGrahamScan at com/williamfiset/algorithms/geometry/ConvexHullGrahamScan.java:13}) MOVE({ConvexHullGrahamScan}  {com.williamfiset.algorithms.geometry.ConvexHullGrahamScan}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ConvexHullMonotoneChainsAlgorithmTest at Geometry/tests/ConvexHullMonotoneChainsAlgorithmTest.java:8}	{Class ConvexHullMonotoneChainsAlgorithmTest at javatests/com/williamfiset/algorithms/geometry/ConvexHullMonotoneChainsAlgorithmTest.java:10}) MOVE({ConvexHullMonotoneChainsAlgorithmTest}  {javatests.com.williamfiset.algorithms.geometry.ConvexHullMonotoneChainsAlgorithmTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class FastFourierTransform at Math/FastFourierTransform.java:109}	{Class FastFourierTransform at com/williamfiset/algorithms/math/FastFourierTransform.java:110}) MOVE({FastFourierTransform}  {com.williamfiset.algorithms.math.FastFourierTransform}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BridgesAdjacencyList at GraphTheory/BridgesAdjacencyList.java:14}	{Class BridgesAdjacencyList at com/williamfiset/algorithms/graphtheory/BridgesAdjacencyList.java:15}) MOVE({BridgesAdjacencyList}  {com.williamfiset.algorithms.graphtheory.BridgesAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class Combinations at ConstructiveAlgorithms/Combinations.java:1}	{Class Combinations at com/williamfiset/algorithms/other/Combinations.java:11}) MOVE({Combinations}  {com.williamfiset.algorithms.other.Combinations}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ArticulationPointsAdjacencyList at GraphTheory/ArticulationPointsAdjacencyList.java:14}	{Class ArticulationPointsAdjacencyList at com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyList.java:15}) MOVE({ArticulationPointsAdjacencyList}  {com.williamfiset.algorithms.graphtheory.ArticulationPointsAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class EdmondsKarpAdjacencyListOptimized at GraphTheory/NetworkFlow/EdmondsKarpAdjacencyListOptimized.java:14}	{Class EdmondsKarpAdjacencyListOptimized at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyListOptimized.java:15}) MOVE({EdmondsKarpAdjacencyListOptimized}  {com.williamfiset.algorithms.graphtheory.EdmondsKarpAdjacencyListOptimized}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class GaussianElimination at LinearAlgebra/GaussianElimination.java:1}	{Class GaussianElimination at com/williamfiset/algorithms/linearalgebra/GaussianElimination.java:10}) MOVE({GaussianElimination}  {com.williamfiset.algorithms.linearalgebra.GaussianElimination}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BreadthFirstSearchRecursive at GraphTheory/BreadthFirstSearchRecursive.java:16}	{Class BreadthFirstSearchRecursive at com/williamfiset/algorithms/graphtheory/BreadthFirstSearchRecursive.java:17}) MOVE({BreadthFirstSearchRecursive}  {com.williamfiset.algorithms.graphtheory.BreadthFirstSearchRecursive}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BridgesAdjacencyListIterativeTest at GraphTheory/tests/BridgesAdjacencyListIterativeTest.java:8}	{Class BridgesAdjacencyListIterativeTest at javatests/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListIterativeTest.java:10}) MOVE({BridgesAdjacencyListIterativeTest}  {javatests.com.williamfiset.algorithms.graphtheory.BridgesAdjacencyListIterativeTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class Line at Geometry/Line.java:11}	{Class Line at com/williamfiset/algorithms/geometry/Line.java:12}) MOVE({Line}  {com.williamfiset.algorithms.geometry.Line}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class KnapsackUnbounded at DynamicProgramming/KnapsackUnbounded.java:1}	{Class KnapsackUnbounded at com/williamfiset/algorithms/dp/KnapsackUnbounded.java:21}) MOVE({KnapsackUnbounded}  {com.williamfiset.algorithms.dp.KnapsackUnbounded}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ConvexPolygonCutWithLineSegment at Geometry/ConvexPolygonCutWithLineSegment.java:12}	{Class ConvexPolygonCutWithLineSegment at com/williamfiset/algorithms/geometry/ConvexPolygonCutWithLineSegment.java:13}) MOVE({ConvexPolygonCutWithLineSegment}  {com.williamfiset.algorithms.geometry.ConvexPolygonCutWithLineSegment}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class RootingTree at GraphTheory/TreeAlgorithms/[UNTESTED]RootingTree.java:32}	{Class RootingTree at com/williamfiset/algorithms/graphtheory/treealgorithms/[UNTESTED]RootingTree.java:33}) MOVE({RootingTree}  {com.williamfiset.algorithms.graphtheory.RootingTree}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class GCD at Math/GCD.java:1}	{Class GCD at com/williamfiset/algorithms/math/GCD.java:10}) MOVE({GCD}  {com.williamfiset.algorithms.math.GCD}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ExtendedEuclideanAlgorithm at Math/ExtendedEuclideanAlgorithm.java:1}	{Class ExtendedEuclideanAlgorithm at com/williamfiset/algorithms/math/ExtendedEuclideanAlgorithm.java:6}) MOVE({ExtendedEuclideanAlgorithm}  {com.williamfiset.algorithms.math.ExtendedEuclideanAlgorithm}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LazyPrimsAdjacencyList at GraphTheory/LazyPrimsAdjacencyList.java:14}	{Class LazyPrimsAdjacencyList at com/williamfiset/algorithms/graphtheory/LazyPrimsAdjacencyList.java:15}) MOVE({LazyPrimsAdjacencyList}  {com.williamfiset.algorithms.graphtheory.LazyPrimsAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class ConvexPolygonContainsPoint at Geometry/ConvexPolygonContainsPoint.java:13}	{Class ConvexPolygonContainsPoint at com/williamfiset/algorithms/geometry/ConvexPolygonContainsPoint.java:13}) MOVE({ConvexPolygonContainsPoint}  {com.williamfiset.algorithms.geometry.ConvexPolygonContainsPoint}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class AStar_GridHeuristic at GraphTheory/AStar_GridHeuristic.java:9}	{Class AStar_GridHeuristic at com/williamfiset/algorithms/graphtheory/AStar_GridHeuristic.java:9}) MOVE({AStar_GridHeuristic}  {com.williamfiset.algorithms.graphtheory.AStar_GridHeuristic}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BubbleSort at SortingAlgorithms/BubbleSort.java:9}	{Class BubbleSort at com/williamfiset/algorithms/sorting/BubbleSort.java:10}) MOVE({BubbleSort}  {com.williamfiset.algorithms.sorting.BubbleSort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TriangleArea at Geometry/TriangleArea.java:13}	{Class TriangleArea at com/williamfiset/algorithms/geometry/TriangleArea.java:14}) MOVE({TriangleArea}  {com.williamfiset.algorithms.geometry.TriangleArea}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class FloydWarshallSolverTest at GraphTheory/tests/FloydWarshallSolverTest.java:7}	{Class FloydWarshallSolverTest at javatests/com/williamfiset/algorithms/graphtheory/FloydWarshallSolverTest.java:9}) MOVE({FloydWarshallSolverTest}  {javatests.com.williamfiset.algorithms.graphtheory.FloydWarshallSolverTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Method radixSort(int[]) at SortingAlgorithms/RadixSort.java:8}	{Method radixSort(int[]) at com/williamfiset/algorithms/sorting/RadixSort.java:8}) MOVE({RadixSort radixSort(int[])}  {com.williamfiset.algorithms.sorting.RadixSort radixSort(int[])}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class EulerianPathDirectedEdgesAdjacencyList at GraphTheory/EulerianPathDirectedEdgesAdjacencyList.java:14}	{Class EulerianPathDirectedEdgesAdjacencyList at com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyList.java:14}) MOVE({EulerianPathDirectedEdgesAdjacencyList}  {com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList at GraphTheory/NetworkFlow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java:17}	{Class MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java:18}) MOVE({MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList}  {com.williamfiset.algorithms.graphtheory.MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TreeNode at GraphTheory/TreeAlgorithms/[UNTESTED]RootingTree.java:13}	{Class TreeNode at com/williamfiset/algorithms/graphtheory/treealgorithms/[UNTESTED]RootingTree.java:14}) MOVE({TreeNode}  {com.williamfiset.algorithms.graphtheory.TreeNode}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TreeCenter at GraphTheory/TreeAlgorithms/[UNTESTED]TreeCenter.java:11}	{Class TreeCenter at com/williamfiset/algorithms/graphtheory/treealgorithms/[UNTESTED]TreeCenter.java:12}) MOVE({TreeCenter}  {com.williamfiset.algorithms.graphtheory.TreeCenter}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BucketSort at SortingAlgorithms/BucketSort.java:9}	{Class BucketSort at com/williamfiset/algorithms/sorting/BucketSort.java:10}) MOVE({BucketSort}  {com.williamfiset.algorithms.sorting.BucketSort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class IndexMinPQ at GraphTheory/EagerPrimsAdjacencyList.java:136}	{Class IndexMinPQ at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:137}) MOVE({IndexMinPQ}  {com.williamfiset.algorithms.graphtheory.IndexMinPQ}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class MatrixDeterminantLaplaceExpansion at LinearAlgebra/MatrixDeterminantLaplaceExpansion.java:1}	{Class MatrixDeterminantLaplaceExpansion at com/williamfiset/algorithms/linearalgebra/MatrixDeterminantLaplaceExpansion.java:13}) MOVE({MatrixDeterminantLaplaceExpansion}  {com.williamfiset.algorithms.linearalgebra.MatrixDeterminantLaplaceExpansion}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TarjanAdjacencyMatrix at GraphTheory/TarjanAdjacencyMatrix.java:8}	{Class TarjanAdjacencyMatrix at com/williamfiset/algorithms/graphtheory/TarjanAdjacencyMatrix.java:10}) MOVE({TarjanAdjacencyMatrix}  {com.williamfiset.algorithms.graphtheory.TarjanAdjacencyMatrix}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TestUtils at Utils/TestUtils.java:3}	{Class TestUtils at com/williamfiset/algorithms/utils/TestUtils.java:5}) MOVE({TestUtils}  {com.williamfiset.algorithms.utils.TestUtils}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BitManipulationsTest at Other/tests/BitManipulationsTest.java:4}	{Class BitManipulationsTest at javatests/com/williamfiset/algorithms/other/BitManipulationsTest.java:6}) MOVE({BitManipulationsTest}  {javatests.com.williamfiset.algorithms.other.BitManipulationsTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class UnionFind at GraphTheory/ConnectedComponentsAdjacencyList.java:80}	{Class UnionFind at com/williamfiset/algorithms/graphtheory/ConnectedComponentsAdjacencyList.java:81}) MOVE({UnionFind}  {com.williamfiset.algorithms.graphtheory.UnionFind}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LCM at Math/LCM.java:1}	{Class LCM at com/williamfiset/algorithms/math/LCM.java:10}) MOVE({LCM}  {com.williamfiset.algorithms.math.LCM}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class UniqueCombinations at ConstructiveAlgorithms/UniqueCombinations.java:15}	{Class UniqueCombinations at com/williamfiset/algorithms/other/UniqueCombinations.java:16}) MOVE({UniqueCombinations}  {com.williamfiset.algorithms.other.UniqueCombinations}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class GeneticAlgorithm_textSearch at AI/GeneticAlgorithm_textSearch.java:10}	{Class GeneticAlgorithm_textSearch at com/williamfiset/algorithms/ai/GeneticAlgorithm_textSearch.java:11}) MOVE({GeneticAlgorithm_textSearch}  {com.williamfiset.algorithms.ai.GeneticAlgorithm_textSearch}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BellmanFordAdjacencyList at GraphTheory/BellmanFordAdjacencyList.java:11}	{Class BellmanFordAdjacencyList at com/williamfiset/algorithms/graphtheory/BellmanFordAdjacencyList.java:12}) MOVE({BellmanFordAdjacencyList}  {com.williamfiset.algorithms.graphtheory.BellmanFordAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class DijkstrasShortestPathAllNodesAdjacencyList at GraphTheory/DijkstrasShortestPathAllNodesAdjacencyList.java:10}	{Class DijkstrasShortestPathAllNodesAdjacencyList at com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAllNodesAdjacencyList.java:11}) MOVE({DijkstrasShortestPathAllNodesAdjacencyList}  {com.williamfiset.algorithms.graphtheory.DijkstrasShortestPathAllNodesAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class RotateSquareMatrixInplace at LinearAlgebra/RotateSquareMatrixInplace.java:1}	{Class RotateSquareMatrixInplace at com/williamfiset/algorithms/linearalgebra/RotateSquareMatrixInplace.java:10}) MOVE({RotateSquareMatrixInplace}  {com.williamfiset.algorithms.linearalgebra.RotateSquareMatrixInplace}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class Mergesort at SortingAlgorithms/Mergesort.java:10}	{Class Mergesort at com/williamfiset/algorithms/sorting/Mergesort.java:11}) MOVE({Mergesort}  {com.williamfiset.algorithms.sorting.Mergesort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class MatrixMultiplication at LinearAlgebra/MatrixMultiplication.java:1}	{Class MatrixMultiplication at com/williamfiset/algorithms/linearalgebra/MatrixMultiplication.java:10}) MOVE({MatrixMultiplication}  {com.williamfiset.algorithms.linearalgebra.MatrixMultiplication}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class MatrixInverse at LinearAlgebra/MatrixInverse.java:1}	{Class MatrixInverse at com/williamfiset/algorithms/linearalgebra/MatrixInverse.java:10}) MOVE({MatrixInverse}  {com.williamfiset.algorithms.linearalgebra.MatrixInverse}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class CircleCircleIntersectionArea at Geometry/CircleCircleIntersectionArea.java:14}	{Class CircleCircleIntersectionArea at com/williamfiset/algorithms/geometry/CircleCircleIntersectionArea.java:15}) MOVE({CircleCircleIntersectionArea}  {com.williamfiset.algorithms.geometry.CircleCircleIntersectionArea}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TspDynamicProgrammingRecursive at GraphTheory/TspDynamicProgrammingRecursive.java:19}	{Class TspDynamicProgrammingRecursive at com/williamfiset/algorithms/graphtheory/TspDynamicProgrammingRecursive.java:20}) MOVE({TspDynamicProgrammingRecursive}  {com.williamfiset.algorithms.graphtheory.TspDynamicProgrammingRecursive}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class InterpolationSearch at SearchAlgorithms/InterpolationSearch.java:1}	{Class InterpolationSearch at com/williamfiset/algorithms/search/InterpolationSearch.java:8}) MOVE({InterpolationSearch}  {com.williamfiset.algorithms.search.InterpolationSearch}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class EditDistance at DynamicProgramming/EditDistance.java:1}	{Class EditDistance at com/williamfiset/algorithms/dp/EditDistance.java:10}) MOVE({EditDistance}  {com.williamfiset.algorithms.dp.EditDistance}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LongestCommonSubstringTest at StringAlgorithms/tests/LongestCommonSubstringTest.java:5}	{Class LongestCommonSubstringTest at javatests/com/williamfiset/algorithms/strings/LongestCommonSubstringTest.java:9}) MOVE({LongestCommonSubstringTest}  {javatests.com.williamfiset.algorithms.strings.LongestCommonSubstringTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class SteinerTreeTest at GraphTheory/tests/SteinerTreeTest.java:6}	{Class SteinerTreeTest at javatests/com/williamfiset/algorithms/graphtheory/SteinerTreeTest.java:8}) MOVE({SteinerTreeTest}  {javatests.com.williamfiset.algorithms.graphtheory.SteinerTreeTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TravelingSalesmanProblemTest at GraphTheory/tests/TravelingSalesmanProblemTest.java:6}	{Class TravelingSalesmanProblemTest at javatests/com/williamfiset/algorithms/graphtheory/TravelingSalesmanProblemTest.java:12}) MOVE({TravelingSalesmanProblemTest}  {javatests.com.williamfiset.algorithms.graphtheory.TravelingSalesmanProblemTest}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class TernarySearchDiscrete at SearchAlgorithms/TernarySearchDiscrete.java:1}	{Class TernarySearchDiscrete at com/williamfiset/algorithms/search/TernarySearchDiscrete.java:17}) MOVE({TernarySearchDiscrete}  {com.williamfiset.algorithms.search.TernarySearchDiscrete}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LongestCommonPrefixArray at StringAlgorithms/LongestCommonPrefixArray.java:14}	{Class LongestCommonPrefixArray at com/williamfiset/algorithms/strings/LongestCommonPrefixArray.java:15}) MOVE({LongestCommonPrefixArray}  {com.williamfiset.algorithms.strings.LongestCommonPrefixArray}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class MatrixPower at LinearAlgebra/MatrixPower.java:1}	{Class MatrixPower at com/williamfiset/algorithms/linearalgebra/MatrixPower.java:10}) MOVE({MatrixPower}  {com.williamfiset.algorithms.linearalgebra.MatrixPower}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class SelectionSort at SortingAlgorithms/SelectionSort.java:9}	{Class SelectionSort at com/williamfiset/algorithms/sorting/SelectionSort.java:10}) MOVE({SelectionSort}  {com.williamfiset.algorithms.sorting.SelectionSort}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class EagerPrimsAdjacencyList at GraphTheory/EagerPrimsAdjacencyList.java:12}	{Class EagerPrimsAdjacencyList at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:13}) MOVE({EagerPrimsAdjacencyList}  {com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class LongestIncreasingSubsequence at DynamicProgramming/LongestIncreasingSubsequence.java:1}	{Class LongestIncreasingSubsequence at com/williamfiset/algorithms/dp/LongestIncreasingSubsequence.java:9}) MOVE({LongestIncreasingSubsequence}  {com.williamfiset.algorithms.dp.LongestIncreasingSubsequence}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class MaximumSubarray at DynamicProgramming/MaximumSubarray.java:1}	{Class MaximumSubarray at com/williamfiset/algorithms/dp/MaximumSubarray.java:8}) MOVE({MaximumSubarray}  {com.williamfiset.algorithms.dp.MaximumSubarray}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class BipartiteGraphCheckAdjacencyList at GraphTheory/NetworkFlow/BipartiteGraphCheckAdjacencyList.java:12}	{Class BipartiteGraphCheckAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyList.java:13}) MOVE({BipartiteGraphCheckAdjacencyList}  {com.williamfiset.algorithms.graphtheory.BipartiteGraphCheckAdjacencyList}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class SteinerTree at GraphTheory/SteinerTree.java:15}	{Class SteinerTree at com/williamfiset/algorithms/graphtheory/SteinerTree.java:16}) MOVE({SteinerTree}  {com.williamfiset.algorithms.graphtheory.SteinerTree}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class EulerTotientFunctionWithSieve at Math/EulerTotientFunctionWithSieve.java:1}	{Class EulerTotientFunctionWithSieve at com/williamfiset/algorithms/math/EulerTotientFunctionWithSieve.java:7}) MOVE({EulerTotientFunctionWithSieve}  {com.williamfiset.algorithms.math.EulerTotientFunctionWithSieve}),
fcab435489dd0f6bd8201e72441592b1f6efd0ee,MOVE, MOVE	{Class KruskalsEdgeList at GraphTheory/KruskalsEdgeList.java:1}	{Class KruskalsEdgeList at com/williamfiset/algorithms/graphtheory/KruskalsEdgeList.java:8}) MOVE({KruskalsEdgeList}  {com.williamfiset.algorithms.graphtheory.KruskalsEdgeList}),
a61945bd60ddf90a65febd0c98dfa27e3bc5b24c,EXTRACT, EXTRACT	{Method solve() at com/williamfiset/algorithms/strings/Lcs.java:364}	{Method addLcs(int  int  int  int  int[]  int[]  int[]) at com/williamfiset/algorithms/strings/Lcs.java:365}) EXTRACT({com.williamfiset.algorithms.strings.Lcs LcsSolver solve()}  {com.williamfiset.algorithms.strings.Lcs LcsSolver addLcs(int  int  int  int  int[]  int[]  int[])}),
a61945bd60ddf90a65febd0c98dfa27e3bc5b24c,RENAME, RENAME	{Method enoughColorsInWindow(int  int  int[]  int[]) at com/williamfiset/algorithms/strings/Lcs.java:348}	{Method enoughUniqueColorsInWindow(int  int  int[]  int[]) at com/williamfiset/algorithms/strings/Lcs.java:348}) RENAME({com.williamfiset.algorithms.strings.Lcs LcsSolver enoughColorsInWindow(int  int  int[]  int[])}  {com.williamfiset.algorithms.strings.Lcs LcsSolver enoughUniqueColorsInWindow(int  int  int[]  int[])}),
387b87a88d5fa2471fb516fcf1c882ab8ddc168b,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method solve(Point2D[]  Hole[]  int) at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:44}	{Method solve(Mouse[]  Hole[]  int) at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:57}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.examples.MiceAndOwls solve(Point2D[]  Hole[]  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.MiceAndOwls solve(Mouse[]  Hole[]  int)}),
be65281b19015329d9b1886e4ac77591fe47bc30,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:170}	{Method augment(long) at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:43}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample FordFulkersonDfsSolver dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample Edge augment(long)}),
be65281b19015329d9b1886e4ac77591fe47bc30,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:170}	{Method remainingCapacity() at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:39}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample FordFulkersonDfsSolver dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample Edge remainingCapacity()}),
bd817b03dcc7daedce35ed84e15ef8a017f23fa7,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(long[]  Operation) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:43}	{Method new(long[]  SegmentCombinationFn  RangeUpdateFn) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:66}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree new(long[]  Operation)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree new(long[]  SegmentCombinationFn  RangeUpdateFn)}),
bd817b03dcc7daedce35ed84e15ef8a017f23fa7,RENAME, RENAME	{Method update(int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:183}	{Method pointUpdate(int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:219}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree update(int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree pointUpdate(int  long)}),
bd817b03dcc7daedce35ed84e15ef8a017f23fa7,RENAME, RENAME	{Method update(int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:187}	{Method pointUpdate(int  int  int  int  long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:223}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree update(int  int  int  int  long)}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree pointUpdate(int  int  int  int  long)}),
7c17c47dbf0e87b05777730983cba2d2dea397d5,INLINE, INLINE	{Method test() at GraphTheory/TspDynamicProgrammingIterative.java:159}	{Method main(String[]) at GraphTheory/TspDynamicProgrammingIterative.java:151}) INLINE({TspDynamicProgrammingIterative test()}  {TspDynamicProgrammingIterative main(String[])}),
7c17c47dbf0e87b05777730983cba2d2dea397d5,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method combinations(int[]  int  int  boolean[]  List) at GraphTheory/TspDynamicProgrammingIterative.java:132}	{Method combinations(int  int  int  int  List) at GraphTheory/TspDynamicProgrammingIterative.java:129}) CHANGE_SIGNATURE({TspDynamicProgrammingIterative combinations(int[]  int  int  boolean[]  List)}  {TspDynamicProgrammingIterative combinations(int  int  int  int  List)}),
f9b77035094afa21840dbed9cbcf088d6dfbeae9,RENAME, RENAME	{Class EditDistance at src/main/java/com/williamfiset/algorithms/dp/EditDistance.java:10}	{Class EditDistanceIterative at src/main/java/com/williamfiset/algorithms/dp/EditDistanceIterative.java:10}) RENAME({com.williamfiset.algorithms.dp.EditDistance}  {com.williamfiset.algorithms.dp.EditDistanceIterative}),
225445a856326d77a4d8d8344604a6f4f84f5df0,MOVE_RENAME, MOVE_RENAME	{Method function2(Long  Long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/SumQuerySumUpdateSegmentTree.java:35}	{Method sumFunction(Long  Long) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/MinQuerySumUpdateSegmentTree.java:34}) MOVE_RENAME({com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTree function2(Long  Long)}  {com.williamfiset.algorithms.datastructures.segmenttree.MinQuerySumUpdateSegmentTree sumFunction(Long  Long)}),
ccae9a3f82dd58d1549a0742047ed5d358cc2347,RENAME, RENAME	{Class TreeIsomorphismHash at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismHash.java:7}	{Class TreeIsomorphism at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphism.java:15}) RENAME({com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismHash}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism}),
ef9b0ba9d2e1b1af893b8ba814a25c113f19d3ad,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int  Edge[]) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:49}	{Method new(int  int  Edge[]) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:45}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.Boruvkas new(int  Edge[])}  {com.williamfiset.algorithms.graphtheory.Boruvkas new(int  int  Edge[])}),
ef9b0ba9d2e1b1af893b8ba814a25c113f19d3ad,INLINE, INLINE	{Method addDirectedEdge(Edge[]  int  int  int  int) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:121}	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:170}) INLINE({com.williamfiset.algorithms.graphtheory.Boruvkas addDirectedEdge(Edge[]  int  int  int  int)}  {com.williamfiset.algorithms.graphtheory.Boruvkas main(String[])}),
ef9b0ba9d2e1b1af893b8ba814a25c113f19d3ad,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int  int  int  int) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:15}	{Method new(int  int  int) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:12}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.Boruvkas Edge new(int  int  int  int)}  {com.williamfiset.algorithms.graphtheory.Boruvkas Edge new(int  int  int)}),
ef9b0ba9d2e1b1af893b8ba814a25c113f19d3ad,INLINE, INLINE	{Method createEmptyGraph(int) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:117}	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/Boruvkas.java:170}) INLINE({com.williamfiset.algorithms.graphtheory.Boruvkas createEmptyGraph(int)}  {com.williamfiset.algorithms.graphtheory.Boruvkas main(String[])}),
59e5e0da29c8ddfa330fdd565f623373681d2045,MOVE, MOVE	{Method floydWarshallExtraMemory(double[][]) at GraphTheory/FloydWarshall.java:46}	{Method floydWarshallExtraMemory(double[][]) at GraphTheory/FloydWarshallSolver.java:96}) MOVE({FloydWarshall floydWarshallExtraMemory(double[][])}  {FloydWarshallSolver floydWarshallExtraMemory(double[][])}),
59e5e0da29c8ddfa330fdd565f623373681d2045,RENAME, RENAME	{Class FloydWarshallTest at GraphTheory/tests/FloydWarshallTest.java:6}	{Class FloydWarshallSolverTest at GraphTheory/tests/FloydWarshallSolverTest.java:6}) RENAME({FloydWarshallTest}  {FloydWarshallSolverTest}),
35db39528164b39b35de22f5e9266b28a1357ea5,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method ternarySearch(double  double) at SearchAlgorithms/TernarySearch.java:28}	{Method ternarySearch(double  double  DoubleFunction) at SearchAlgorithms/TernarySearch.java:28}) CHANGE_SIGNATURE({TernarySearch ternarySearch(double  double)}  {TernarySearch ternarySearch(double  double  DoubleFunction)}),
3467373500a993fe777342b3d8e676bfe92a12b7,RENAME, RENAME	{Method createTransverseGraph() at src/main/java/com/williamfiset/algorithms/graphtheory/Kosaraju.java:36}	{Method createTransposeGraph() at src/main/java/com/williamfiset/algorithms/graphtheory/Kosaraju.java:39}) RENAME({com.williamfiset.algorithms.graphtheory.Kosaraju createTransverseGraph()}  {com.williamfiset.algorithms.graphtheory.Kosaraju createTransposeGraph()}),
3467373500a993fe777342b3d8e676bfe92a12b7,EXTRACT, EXTRACT	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/graphtheory/Kosaraju.java:114}	{Method example2() at src/main/java/com/williamfiset/algorithms/graphtheory/Kosaraju.java:124}) EXTRACT({com.williamfiset.algorithms.graphtheory.Kosaraju main(String[])}  {com.williamfiset.algorithms.graphtheory.Kosaraju example2()}),
e2311d7605c16b11ecca78834d9d7e7aa709478e,MOVE, MOVE	{Class NarrowArtGalleryRecursive at src/main/java/com/williamfiset/algorithms/dp/examples/narrowartgallery/NarrowArtGalleryRecursive.java:5}	{Class NarrowArtGalleryRecursive at src/main/java/com/williamfiset/algorithms/dp/examples/narrowartgallery/NarrowArtGalleryRecursive.java:3}) MOVE({com.williamfiset.algorithms.dp.examples.NarrowArtGalleryRecursive}  {NarrowArtGalleryRecursive}),
8389208866c61eede46473076a3abeebb1053456,RENAME, RENAME	{Method randomLcssWithBruteForceSolver() at javatests/com/williamfiset/algorithms/strings/LongestCommonSubstringTest.java:328}	{Method randomLcssWithBruteForceSolver1() at javatests/com/williamfiset/algorithms/strings/LongestCommonSubstringTest.java:328}) RENAME({javatests.com.williamfiset.algorithms.strings.LongestCommonSubstringTest randomLcssWithBruteForceSolver()}  {javatests.com.williamfiset.algorithms.strings.LongestCommonSubstringTest randomLcssWithBruteForceSolver1()}),
7588cae1fdcec72c01c1a3407b651414f49c8910,RENAME, RENAME	{Method treeHeight(TreeNode) at com/williamfiset/algorithms/graphtheory/treealgorithms/examples/TreeHeight.java:38}	{Method treeHeight2(TreeNode) at com/williamfiset/algorithms/graphtheory/treealgorithms/examples/TreeHeight.java:45}) RENAME({com.williamfiset.algorithms.graphtheory.treealgorithms.examples.TreeHeight treeHeight(TreeNode)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.examples.TreeHeight treeHeight2(TreeNode)}),
7588cae1fdcec72c01c1a3407b651414f49c8910,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/treealgorithms/examples/TreeHeight.java:51}	{Method testTreeHeight2() at com/williamfiset/algorithms/graphtheory/treealgorithms/examples/TreeHeight.java:73}) EXTRACT({com.williamfiset.algorithms.graphtheory.treealgorithms.examples.TreeHeight main(String[])}  {com.williamfiset.algorithms.graphtheory.treealgorithms.examples.TreeHeight testTreeHeight2()}),
7588cae1fdcec72c01c1a3407b651414f49c8910,EXTRACT, EXTRACT	{Method main(String[]) at com/williamfiset/algorithms/graphtheory/treealgorithms/examples/TreeHeight.java:51}	{Method testTreeHeight1() at com/williamfiset/algorithms/graphtheory/treealgorithms/examples/TreeHeight.java:63}) EXTRACT({com.williamfiset.algorithms.graphtheory.treealgorithms.examples.TreeHeight main(String[])}  {com.williamfiset.algorithms.graphtheory.treealgorithms.examples.TreeHeight testTreeHeight1()}),
b26708e6144fcfc16a74614a1a17b8d3306c1a88,RENAME, RENAME	{Class RangeQueryPointUpdateSegmentTreeTest at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTreeTest.java:13}	{Class GenericSegmentTreeTest at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTreeTest.java:13}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTreeTest}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest}),
0be176c9a231874e00eb14b430aec777a79ddc0f,EXTRACT, EXTRACT	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/dp/examples/scenes/Scenes.java:17}	{Method solution1() at src/main/java/com/williamfiset/algorithms/dp/examples/scenes/Scenes.java:27}) EXTRACT({Scenes main(String[])}  {Scenes solution1()}),
a4cea71d98b471986db392cdf361864b975db0be,RENAME, RENAME	{Class TreeCanonicalFormAdjacencyList at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyList.java:16}	{Class TreeIsomorphismWithBfs at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfs.java:19}) RENAME({com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyList}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs}),
a4cea71d98b471986db392cdf361864b975db0be,EXTRACT_MOVE, EXTRACT_MOVE	{Method testSimilarChains() at javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyListTest.java:56}	{Method treesAreIsomorphic(List  List) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfs.java:145}) EXTRACT_MOVE({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyListTest testSimilarChains()}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs treesAreIsomorphic(List  List)}),
a4cea71d98b471986db392cdf361864b975db0be,EXTRACT_MOVE, EXTRACT_MOVE	{Method testSingleton() at javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyListTest.java:13}	{Method treesAreIsomorphic(List  List) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfs.java:145}) EXTRACT_MOVE({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyListTest testSingleton()}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs treesAreIsomorphic(List  List)}),
a4cea71d98b471986db392cdf361864b975db0be,RENAME, RENAME	{Class TreeCanonicalFormAdjacencyListTest at javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyListTest.java:11}	{Class TreeIsomorphismWithBfsTest at javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfsTest.java:12}) RENAME({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyListTest}  {javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfsTest}),
a4cea71d98b471986db392cdf361864b975db0be,EXTRACT_MOVE, EXTRACT_MOVE	{Method testTwoNodeTree() at javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyListTest.java:23}	{Method treesAreIsomorphic(List  List) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfs.java:145}) EXTRACT_MOVE({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyListTest testTwoNodeTree()}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs treesAreIsomorphic(List  List)}),
a4cea71d98b471986db392cdf361864b975db0be,EXTRACT_MOVE, EXTRACT_MOVE	{Method testSmall() at javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCanonicalFormAdjacencyListTest.java:35}	{Method treesAreIsomorphic(List  List) at com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfs.java:145}) EXTRACT_MOVE({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCanonicalFormAdjacencyListTest testSmall()}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs treesAreIsomorphic(List  List)}),
a84829e5bd391e9f485f96805b25a87e056f7a6b,RENAME, RENAME	{Class HashTableSeperateChainingTest at javatests/com/williamfiset/algorithms/datastructures/hashtable/HashTableSeperateChainingTest.java:9}	{Class HashTableSeparateChainingTest at javatests/com/williamfiset/algorithms/datastructures/hashtable/HashTableSeparateChainingTest.java:9}) RENAME({javatests.com.williamfiset.algorithms.datastructures.hashtable.HashTableSeperateChainingTest}  {javatests.com.williamfiset.algorithms.datastructures.hashtable.HashTableSeparateChainingTest}),
a84829e5bd391e9f485f96805b25a87e056f7a6b,RENAME, RENAME	{Class HashTableSeperateChaining at com/williamfiset/algorithms/datastructures/hashtable/HashTableSeperateChaining.java:35}	{Class HashTableSeparateChaining at com/williamfiset/algorithms/datastructures/hashtable/HashTableSeparateChaining.java:35}) RENAME({com.williamfiset.algorithms.datastructures.hashtable.HashTableSeperateChaining}  {com.williamfiset.algorithms.datastructures.hashtable.HashTableSeparateChaining}),
a7d12d01aec8e0f619769403924f6d15ea3224bf,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method enoughUniqueColorsInWindow(int  int  int[]  int[]) at com/williamfiset/algorithms/strings/Lcs.java:334}	{Method enoughUniqueColorsInWindow(int  int) at com/williamfiset/algorithms/strings/Lcs.java:360}) CHANGE_SIGNATURE({com.williamfiset.algorithms.strings.Lcs LcsSolver enoughUniqueColorsInWindow(int  int  int[]  int[])}  {com.williamfiset.algorithms.strings.Lcs LcsSolver enoughUniqueColorsInWindow(int  int)}),
a7d12d01aec8e0f619769403924f6d15ea3224bf,RENAME, RENAME	{Method buildReverseColorIndexMapping() at com/williamfiset/algorithms/strings/Lcs.java:294}	{Method buildReverseColorMapping() at com/williamfiset/algorithms/strings/Lcs.java:310}) RENAME({com.williamfiset.algorithms.strings.Lcs LcsSolver buildReverseColorIndexMapping()}  {com.williamfiset.algorithms.strings.Lcs LcsSolver buildReverseColorMapping()}),
a7d12d01aec8e0f619769403924f6d15ea3224bf,RENAME, RENAME	{Method retrieveStrAt(int  int  int  int[]) at com/williamfiset/algorithms/strings/Lcs.java:342}	{Method retrieveString(int  int) at com/williamfiset/algorithms/strings/Lcs.java:371}) RENAME({com.williamfiset.algorithms.strings.Lcs LcsSolver retrieveStrAt(int  int  int  int[])}  {com.williamfiset.algorithms.strings.Lcs LcsSolver retrieveString(int  int)}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method toString() at com/williamfiset/algorithms/strings/Lcs.java:96}	{Method toString() at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:139}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray toString()}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray toString()}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method toString(List) at com/williamfiset/algorithms/strings/Lcs.java:127}	{Method toString(List) at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:170}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray toString(List)}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray toString(List)}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method getLcpArray() at com/williamfiset/algorithms/strings/Lcs.java:48}	{Method getLcpArray() at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:91}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray getLcpArray()}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray getLcpArray()}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method buildSuffixArray() at com/williamfiset/algorithms/strings/Lcs.java:54}	{Method buildSuffixArray() at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:97}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray buildSuffixArray()}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray buildSuffixArray()}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method getSa() at com/williamfiset/algorithms/strings/Lcs.java:42}	{Method getSa() at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:85}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray getSa()}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray getSa()}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Class CompactMinSegmentTree at com/williamfiset/algorithms/strings/Lcs.java:484}	{Class CompactMinSegmentTree at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:535}) MOVE({com.williamfiset.algorithms.strings.Lcs CompactMinSegmentTree}  {com.williamfiset.algorithms.strings.LongestCommonSubstring CompactMinSegmentTree}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method findColorFromPos(int  List) at com/williamfiset/algorithms/strings/Lcs.java:114}	{Method findColorFromPos(int  List) at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:157}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray findColorFromPos(int  List)}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray findColorFromPos(int  List)}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method getTextLength() at com/williamfiset/algorithms/strings/Lcs.java:37}	{Method getTextLength() at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:80}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray getTextLength()}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray getTextLength()}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Class LcsSolver at com/williamfiset/algorithms/strings/Lcs.java:260}	{Class LcsSolver at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:303}) MOVE({com.williamfiset.algorithms.strings.Lcs LcsSolver}  {com.williamfiset.algorithms.strings.LongestCommonSubstring LcsSolver}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(String[]  int) at com/williamfiset/algorithms/strings/Lcs.java:278}	{Method new(String[]) at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:321}) CHANGE_SIGNATURE({com.williamfiset.algorithms.strings.Lcs LcsSolver new(String[]  int)}  {com.williamfiset.algorithms.strings.LongestCommonSubstring LcsSolver new(String[])}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method addSentinels(String[]  List) at com/williamfiset/algorithms/strings/Lcs.java:534}	{Method addSentinels(String[]  List) at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:43}) MOVE({com.williamfiset.algorithms.strings.Lcs addSentinels(String[]  List)}  {com.williamfiset.algorithms.strings.LongestCommonSubstring addSentinels(String[]  List)}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Method buildLcpArray() at com/williamfiset/algorithms/strings/Lcs.java:61}	{Method buildLcpArray() at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:104}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray buildLcpArray()}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray buildLcpArray()}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Class SuffixArrayImpl at com/williamfiset/algorithms/strings/Lcs.java:174}	{Class SuffixArrayImpl at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:217}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArrayImpl}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArrayImpl}),
0fd7250b71cdc228a6c1fca95d694bba2c11759b,MOVE, MOVE	{Enum Color at com/williamfiset/algorithms/strings/Lcs.java:147}	{Enum Color at com/williamfiset/algorithms/strings/LongestCommonSubstring.java:190}) MOVE({com.williamfiset.algorithms.strings.Lcs SuffixArray Color}  {com.williamfiset.algorithms.strings.LongestCommonSubstring SuffixArray Color}),
a117ba8ef804b10703c0b8be900fb1efcc94fefb,EXTRACT_MOVE, EXTRACT_MOVE	{Method f(int  MatchingCost[]  int[]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:154}	{Method createInfiniteValueMatchingCost() at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:42}) EXTRACT_MOVE({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive f(int  MatchingCost[]  int[])}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive MatchingCost createInfiniteValueMatchingCost()}),
d716fe0d4bea569d376169598592077815ed42ae,RENAME, RENAME	{Method preprocess() at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:191}	{Method setup(TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:189}) RENAME({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour preprocess()}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour setup(TreeNode)}),
8d3875265cf032571b89ada110e08880ad50a0af,RENAME, RENAME	{Method propagate(int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:268}	{Method propagateQuery(int  int  int) at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/GenericSegmentTree.java:287}) RENAME({com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree propagate(int)}  {com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree propagateQuery(int  int  int)}),
c606d5aac386d79387c16126f537f0c5f44f5dd4,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method bfs(int  int) at com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterative.java:69}	{Method bfs(int) at com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterative.java:56}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.BreadthFirstSearchAdjacencyListIterative bfs(int  int)}  {com.williamfiset.algorithms.graphtheory.BreadthFirstSearchAdjacencyListIterative bfs(int)}),
eb2febea5f974e95c0ca6a8f5e98dd7213589db4,RENAME, RENAME	{Class GeneticAlgorithm_travellingSalesman at AI/GeneticAlgorithm_travellingSalesman.java:11}	{Class GeneticAlgorithm_travelingSalesman at AI/GeneticAlgorithm_travelingSalesman.java:11}) RENAME({GeneticAlgorithm_travellingSalesman}  {GeneticAlgorithm_travelingSalesman}),
aef3659b2ba851c6ebcb3f8a4fb57b566eb8d38d,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method addLeft(long  char  int  int) at StringAlgorithms/RabinKarp.java:130}	{Method addLeft(long  long  char  int) at StringAlgorithms/RabinKarp.java:161}) CHANGE_SIGNATURE({RabinKarp addLeft(long  char  int  int)}  {RabinKarp addLeft(long  long  char  int)}),
aef3659b2ba851c6ebcb3f8a4fb57b566eb8d38d,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method removeLeft(long  char  int  int) at StringAlgorithms/RabinKarp.java:141}	{Method removeLeft(long  long  char  int) at StringAlgorithms/RabinKarp.java:172}) CHANGE_SIGNATURE({RabinKarp removeLeft(long  char  int  int)}  {RabinKarp removeLeft(long  long  char  int)}),
1262f3ecb2099c9c2a582b4002dd9ded965d4b31,RENAME, RENAME	{Method counting_sort(int[]  int  int) at CountingSort.java:5}	{Method countingSort(int[]  int  int) at CountingSort.java:9}) RENAME({CountingSort counting_sort(int[]  int  int)}  {CountingSort countingSort(int[]  int  int)}),
b1ba3d7570a8004e8f95f97f3cfeb343a6950005,INLINE, INLINE	{Method in(int  int) at GraphTheory/TspDynamicProgrammingIterative.java:56}	{Method notIn(int  int) at GraphTheory/TspDynamicProgrammingIterative.java:114}) INLINE({TspDynamicProgrammingIterative in(int  int)}  {TspDynamicProgrammingIterative notIn(int  int)}),
b1ba3d7570a8004e8f95f97f3cfeb343a6950005,RENAME, RENAME	{Method tsp(int  double[][]) at GraphTheory/TspDynamicProgrammingIterative.java:8}	{Method solve() at GraphTheory/TspDynamicProgrammingIterative.java:51}) RENAME({TspDynamicProgrammingIterative tsp(int  double[][])}  {TspDynamicProgrammingIterative solve()}),
b1ba3d7570a8004e8f95f97f3cfeb343a6950005,RENAME, RENAME	{Method tsp(double[][]) at GraphTheory/TspDynamicProgrammingIterative.java:4}	{Method new(double[][]) at GraphTheory/TspDynamicProgrammingIterative.java:23}) RENAME({TspDynamicProgrammingIterative tsp(double[][])}  {TspDynamicProgrammingIterative new(double[][])}),
65fb50d06a63479aa3dfee340cd249f61e50af7b,MOVE, MOVE	{Method main(String[]) at GraphTheory/SteinerTree.java:121}	{Method main(String[]) at GraphTheory2/SteinerTree.java:121}) MOVE({SteinerTree main(String[])}  {SteinerTree main(String[])}),
a0c72757f7588bcd5b79005b853d7b5dfadaca7a,RENAME, RENAME	{Method finalize() at src/main/java/com/williamfiset/algorithms/other/LazyRangeAdder.java:43}	{Method done() at src/main/java/com/williamfiset/algorithms/other/LazyRangeAdder.java:43}) RENAME({com.williamfiset.algorithms.other.LazyRangeAdder finalize()}  {com.williamfiset.algorithms.other.LazyRangeAdder done()}),
e45d7fef7b5334f136c521c0a069675f58aa7a03,INTERNAL_MOVE, INTERNAL_MOVE	{Method rootTree(List  int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:59}	{Method rootTree(List  int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:53}) INTERNAL_MOVE({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour rootTree(List  int)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour TreeNode rootTree(List  int)}),
e45d7fef7b5334f136c521c0a069675f58aa7a03,INTERNAL_MOVE, INTERNAL_MOVE	{Method buildTree(List  TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:65}	{Method buildTree(List  TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestorEulerTour.java:59}) INTERNAL_MOVE({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour buildTree(List  TreeNode)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestorEulerTour TreeNode buildTree(List  TreeNode)}),
e45d7fef7b5334f136c521c0a069675f58aa7a03,INTERNAL_MOVE, INTERNAL_MOVE	{Method buildTree(List  TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestor.java:65}	{Method buildTree(List  TreeNode) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestor.java:59}) INTERNAL_MOVE({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor buildTree(List  TreeNode)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor TreeNode buildTree(List  TreeNode)}),
e45d7fef7b5334f136c521c0a069675f58aa7a03,INTERNAL_MOVE, INTERNAL_MOVE	{Method rootTree(List  int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestor.java:59}	{Method rootTree(List  int) at src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/LowestCommonAncestor.java:53}) INTERNAL_MOVE({com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor rootTree(List  int)}  {com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor TreeNode rootTree(List  int)}),
2030e95deef2797b71c51722096d3387c8f4c751,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method dijkstra(Map  int  int) at com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAllNodesAdjacencyList.java:44}	{Method dijkstra() at com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAllNodesAdjacencyList.java:113}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.DijkstrasShortestPathAllNodesAdjacencyList dijkstra(Map  int  int)}  {com.williamfiset.algorithms.graphtheory.DijkstrasShortestPathAllNodesAdjacencyList dijkstra()}),
2bce6d01ced4878d7d870b1fac6dfb3578b9bfe5,EXTRACT, EXTRACT	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatching.java:143}	{Method test2() at src/main/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatching.java:224}) EXTRACT({com.williamfiset.algorithms.dp.MinimumWeightPerfectMatching main(String[])}  {com.williamfiset.algorithms.dp.MinimumWeightPerfectMatching test2()}),
1610d00ee78e9a3f6a8f6d286c44cc4cbcbf3ec6,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/examples/CapacityScalingExample.java:211}	{Method visited(int) at com/williamfiset/algorithms/graphtheory/networkflow/examples/CapacityScalingExample.java:155}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.examples.CapacityScalingExample CapacityScalingSolver dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.CapacityScalingExample NetworkFlowSolverBase visited(int)}),
1610d00ee78e9a3f6a8f6d286c44cc4cbcbf3ec6,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/examples/CapacityScalingExample.java:211}	{Method visit(int) at com/williamfiset/algorithms/graphtheory/networkflow/examples/CapacityScalingExample.java:150}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.examples.CapacityScalingExample CapacityScalingSolver dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.CapacityScalingExample NetworkFlowSolverBase visit(int)}),
1610d00ee78e9a3f6a8f6d286c44cc4cbcbf3ec6,EXTRACT_MOVE, EXTRACT_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/examples/CapacityScalingExample.java:192}	{Method markAllNodesAsUnvisited() at com/williamfiset/algorithms/graphtheory/networkflow/examples/CapacityScalingExample.java:161}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.examples.CapacityScalingExample CapacityScalingSolver solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.CapacityScalingExample NetworkFlowSolverBase markAllNodesAsUnvisited()}),
93c792d048b1f469aef27840c9097a5c1910a509,RENAME, RENAME	{Class MaxSlidingWindowTester at Other/SlidingWindowMaximum.java:66}	{Class SlidingWindowMaximumTest at Other/tests/SlidingWindowMaximumTest.java:5}) RENAME({MaxSlidingWindowTester}  {SlidingWindowMaximumTest}),
4036daa101bb11d4da1ccad1dd0c5e950918b85e,MOVE, MOVE	{Class PT at com/williamfiset/algorithms/geometry/ClosestPairOfPoints.java:15}	{Class PT at com/williamfiset/algorithms/geometry/ClosestPairOfPoints.java:17}) MOVE({com.williamfiset.algorithms.geometry.PT}  {com.williamfiset.algorithms.geometry.ClosestPairOfPoints PT}),
4036daa101bb11d4da1ccad1dd0c5e950918b85e,RENAME, RENAME	{Class CoplanarPointsTest at com/williamfiset/algorithms/geometry/CoplanarPointsTest.java:12}	{Class CoplanarPoints at com/williamfiset/algorithms/geometry/CoplanarPoints.java:12}) RENAME({com.williamfiset.algorithms.geometry.CoplanarPointsTest}  {com.williamfiset.algorithms.geometry.CoplanarPoints}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BinaryHeapQuickRemovalsTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/priorityqueue/BinaryHeapQuickRemovalsTest.java:12}	{Class BinaryHeapQuickRemovalsTest at src/test/java/com/williamfiset/algorithms/datastructures/priorityqueue/BinaryHeapQuickRemovalsTest.java:12}) MOVE({javatests.com.williamfiset.algorithms.datastructures.priorityqueue.BinaryHeapQuickRemovalsTest}  {com.williamfiset.algorithms.datastructures.priorityqueue.BinaryHeapQuickRemovalsTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class FenwickTreeRangeUpdatePointQueryTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/fenwicktree/FenwickTreeRangeUpdatePointQueryTest.java:9}	{Class FenwickTreeRangeUpdatePointQueryTest at src/test/java/com/williamfiset/algorithms/datastructures/fenwicktree/FenwickTreeRangeUpdatePointQueryTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.datastructures.fenwicktree.FenwickTreeRangeUpdatePointQueryTest}  {com.williamfiset.algorithms.datastructures.fenwicktree.FenwickTreeRangeUpdatePointQueryTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class ArticulationPointsAdjacencyListTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyListTest.java:9}	{Class ArticulationPointsAdjacencyListTest at src/test/java/com/williamfiset/algorithms/graphtheory/ArticulationPointsAdjacencyListTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.ArticulationPointsAdjacencyListTest}  {com.williamfiset.algorithms.graphtheory.ArticulationPointsAdjacencyListTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class AVLTreeTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/balancedtree/AVLTreeTest.java:13}	{Class AVLTreeTest at src/test/java/com/williamfiset/algorithms/datastructures/balancedtree/AVLTreeTest.java:13}) MOVE({javatests.com.williamfiset.algorithms.datastructures.balancedtree.AVLTreeTest}  {com.williamfiset.algorithms.datastructures.balancedtree.AVLTreeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BinarySearchTreeTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTreeTest.java:85}	{Class BinarySearchTreeTest at src/test/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTreeTest.java:85}) MOVE({javatests.com.williamfiset.algorithms.datastructures.binarysearchtree.BinarySearchTreeTest}  {com.williamfiset.algorithms.datastructures.binarysearchtree.BinarySearchTreeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class ConvexHullMonotoneChainsAlgorithmTest at src/test/java/javatests/com/williamfiset/algorithms/geometry/ConvexHullMonotoneChainsAlgorithmTest.java:11}	{Class ConvexHullMonotoneChainsAlgorithmTest at src/test/java/com/williamfiset/algorithms/geometry/ConvexHullMonotoneChainsAlgorithmTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.geometry.ConvexHullMonotoneChainsAlgorithmTest}  {com.williamfiset.algorithms.geometry.ConvexHullMonotoneChainsAlgorithmTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class HashTableDoubleHashingTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/hashtable/HashTableDoubleHashingTest.java:11}	{Class HashTableDoubleHashingTest at src/test/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableDoubleHashingTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.datastructures.hashtable.HashTableDoubleHashingTest}  {com.williamfiset.algorithms.datastructures.hashtable.HashTableDoubleHashingTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BridgesAdjacencyListIterativeTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListIterativeTest.java:11}	{Class BridgesAdjacencyListIterativeTest at src/test/java/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListIterativeTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.BridgesAdjacencyListIterativeTest}  {com.williamfiset.algorithms.graphtheory.BridgesAdjacencyListIterativeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class InterpolationSearchTest at src/test/java/javatests/com/williamfiset/algorithms/search/InterpolationSearchTest.java:8}	{Class InterpolationSearchTest at src/test/java/com/williamfiset/algorithms/search/InterpolationSearchTest.java:8}) MOVE({javatests.com.williamfiset.algorithms.search.InterpolationSearchTest}  {com.williamfiset.algorithms.search.InterpolationSearchTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class MinimumWeightPerfectMatchingTest at src/test/java/javatests/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingTest.java:9}	{Class MinimumWeightPerfectMatchingTest at src/test/java/com/williamfiset/algorithms/dp/MinimumWeightPerfectMatchingTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingTest}  {com.williamfiset.algorithms.dp.MinimumWeightPerfectMatchingTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class NarrowArtGalleryRecursive at src/main/java/com/williamfiset/algorithms/dp/examples/NarrowArtGalleryRecursive.java:3}	{Class NarrowArtGalleryRecursive at src/main/java/com/williamfiset/algorithms/dp/examples/NarrowArtGalleryRecursive.java:5}) MOVE({NarrowArtGalleryRecursive}  {com.williamfiset.algorithms.dp.examples.NarrowArtGalleryRecursive}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class TravelingSalesmanProblemTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/TravelingSalesmanProblemTest.java:11}	{Class TravelingSalesmanProblemTest at src/test/java/com/williamfiset/algorithms/graphtheory/TravelingSalesmanProblemTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.TravelingSalesmanProblemTest}  {com.williamfiset.algorithms.graphtheory.TravelingSalesmanProblemTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class HashTableQuadraticProbingTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/hashtable/HashTableQuadraticProbingTest.java:9}	{Class HashTableQuadraticProbingTest at src/test/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableQuadraticProbingTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.datastructures.hashtable.HashTableQuadraticProbingTest}  {com.williamfiset.algorithms.datastructures.hashtable.HashTableQuadraticProbingTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class TwoSatSolverAdjacencyListTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/TwoSatSolverAdjacencyListTest.java:9}	{Class TwoSatSolverAdjacencyListTest at src/test/java/com/williamfiset/algorithms/graphtheory/TwoSatSolverAdjacencyListTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.TwoSatSolverAdjacencyListTest}  {com.williamfiset.algorithms.graphtheory.TwoSatSolverAdjacencyListTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class TarjanSccSolverAdjacencyListTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/TarjanSccSolverAdjacencyListTest.java:10}	{Class TarjanSccSolverAdjacencyListTest at src/test/java/com/williamfiset/algorithms/graphtheory/TarjanSccSolverAdjacencyListTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.TarjanSccSolverAdjacencyListTest}  {com.williamfiset.algorithms.graphtheory.TarjanSccSolverAdjacencyListTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class RootingTreeTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/RootingTreeTest.java:10}	{Class RootingTreeTest at src/test/java/com/williamfiset/algorithms/graphtheory/treealgorithms/RootingTreeTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.RootingTreeTest}  {com.williamfiset.algorithms.graphtheory.treealgorithms.RootingTreeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class SegmentTreeWithPointersTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/segmenttree/SegmentTreeWithPointersTest.java:10}	{Class SegmentTreeWithPointersTest at src/test/java/com/williamfiset/algorithms/datastructures/segmenttree/SegmentTreeWithPointersTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.datastructures.segmenttree.SegmentTreeWithPointersTest}  {com.williamfiset.algorithms.datastructures.segmenttree.SegmentTreeWithPointersTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BloomFilterTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/bloomfilter/BloomFilterTest.java:13}	{Class BloomFilterTest at src/test/java/com/williamfiset/algorithms/datastructures/bloomfilter/BloomFilterTest.java:13}) MOVE({javatests.com.williamfiset.algorithms.datastructures.bloomfilter.BloomFilterTest}  {com.williamfiset.algorithms.datastructures.bloomfilter.BloomFilterTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BreadthFirstSearchAdjacencyListIterativeTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterativeTest.java:18}	{Class BreadthFirstSearchAdjacencyListIterativeTest at src/test/java/com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterativeTest.java:18}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.BreadthFirstSearchAdjacencyListIterativeTest}  {com.williamfiset.algorithms.graphtheory.BreadthFirstSearchAdjacencyListIterativeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class SplayTreeTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/binarysearchtree/SplayTreeTest.java:8}	{Class SplayTreeTest at src/test/java/com/williamfiset/algorithms/datastructures/binarysearchtree/SplayTreeTest.java:10}) MOVE({SplayTreeTest}  {com.williamfiset.algorithms.datastructures.binarysearchtree.SplayTreeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class StackTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/stack/StackTest.java:10}	{Class StackTest at src/test/java/com/williamfiset/algorithms/datastructures/stack/StackTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.datastructures.stack.StackTest}  {com.williamfiset.algorithms.datastructures.stack.StackTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class FloydWarshallSolverTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/FloydWarshallSolverTest.java:11}	{Class FloydWarshallSolverTest at src/test/java/com/williamfiset/algorithms/graphtheory/FloydWarshallSolverTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.FloydWarshallSolverTest}  {com.williamfiset.algorithms.graphtheory.FloydWarshallSolverTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class SteinerTreeTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/SteinerTreeTest.java:9}	{Class SteinerTreeTest at src/test/java/com/williamfiset/algorithms/graphtheory/SteinerTreeTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.SteinerTreeTest}  {com.williamfiset.algorithms.graphtheory.SteinerTreeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class TestTreeNode at src/test/java/javatests/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTreeTest.java:17}	{Class TestTreeNode at src/test/java/com/williamfiset/algorithms/datastructures/binarysearchtree/BinarySearchTreeTest.java:17}) MOVE({javatests.com.williamfiset.algorithms.datastructures.binarysearchtree.TestTreeNode}  {com.williamfiset.algorithms.datastructures.binarysearchtree.TestTreeNode}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BridgesAdjacencyListTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListTest.java:11}	{Class BridgesAdjacencyListTest at src/test/java/com/williamfiset/algorithms/graphtheory/BridgesAdjacencyListTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.BridgesAdjacencyListTest}  {com.williamfiset.algorithms.graphtheory.BridgesAdjacencyListTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class MinDHeapTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/priorityqueue/MinDHeapTest.java:13}	{Class MinDHeapTest at src/test/java/com/williamfiset/algorithms/datastructures/priorityqueue/MinDHeapTest.java:13}) MOVE({javatests.com.williamfiset.algorithms.datastructures.priorityqueue.MinDHeapTest}  {com.williamfiset.algorithms.datastructures.priorityqueue.MinDHeapTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BitManipulationsTest at src/test/java/javatests/com/williamfiset/algorithms/other/BitManipulationsTest.java:8}	{Class BitManipulationsTest at src/test/java/com/williamfiset/algorithms/other/BitManipulationsTest.java:8}) MOVE({javatests.com.williamfiset.algorithms.other.BitManipulationsTest}  {com.williamfiset.algorithms.other.BitManipulationsTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BipartiteGraphCheckAdjacencyListTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyListTest.java:10}	{Class BipartiteGraphCheckAdjacencyListTest at src/test/java/com/williamfiset/algorithms/graphtheory/networkflow/BipartiteGraphCheckAdjacencyListTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.networkflow.BipartiteGraphCheckAdjacencyListTest}  {com.williamfiset.algorithms.graphtheory.networkflow.BipartiteGraphCheckAdjacencyListTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class BinaryHeapTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/priorityqueue/BinaryHeapTest.java:12}	{Class BinaryHeapTest at src/test/java/com/williamfiset/algorithms/datastructures/priorityqueue/BinaryHeapTest.java:12}) MOVE({javatests.com.williamfiset.algorithms.datastructures.priorityqueue.BinaryHeapTest}  {com.williamfiset.algorithms.datastructures.priorityqueue.BinaryHeapTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class SuffixArrayTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArrayTest.java:13}	{Class SuffixArrayTest at src/test/java/com/williamfiset/algorithms/datastructures/suffixarray/SuffixArrayTest.java:13}) MOVE({javatests.com.williamfiset.algorithms.datastructures.suffixarray.SuffixArrayTest}  {com.williamfiset.algorithms.datastructures.suffixarray.SuffixArrayTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class IntQueueTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/queue/IntQueueTest.java:10}	{Class IntQueueTest at src/test/java/com/williamfiset/algorithms/datastructures/queue/IntQueueTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.datastructures.queue.IntQueueTest}  {com.williamfiset.algorithms.datastructures.queue.IntQueueTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class RangeQueryPointUpdateSegmentTree at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:1}	{Class RangeQueryPointUpdateSegmentTree at src/main/java/com/williamfiset/algorithms/datastructures/segmenttree/RangeQueryPointUpdateSegmentTree.java:4}) MOVE({RangeQueryPointUpdateSegmentTree}  {com.williamfiset.algorithms.datastructures.segmenttree.RangeQueryPointUpdateSegmentTree}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class LinkedListTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/linkedlist/LinkedListTest.java:11}	{Class LinkedListTest at src/test/java/com/williamfiset/algorithms/datastructures/linkedlist/LinkedListTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.datastructures.linkedlist.LinkedListTest}  {com.williamfiset.algorithms.datastructures.linkedlist.LinkedListTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class MinCostMaxFlowTests at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowTests.java:10}	{Class MinCostMaxFlowTests at src/test/java/com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowTests.java:10}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowTests}  {com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowTests}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class TreeIsomorphismWithBfsTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfsTest.java:18}	{Class TreeIsomorphismWithBfsTest at src/test/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismWithBfsTest.java:18}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfsTest}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfsTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class UnionFindTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/unionfind/UnionFindTest.java:8}	{Class UnionFindTest at src/test/java/com/williamfiset/algorithms/datastructures/unionfind/UnionFindTest.java:8}) MOVE({javatests.com.williamfiset.algorithms.datastructures.unionfind.UnionFindTest}  {com.williamfiset.algorithms.datastructures.unionfind.UnionFindTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class ConstObj at src/test/java/javatests/com/williamfiset/algorithms/datastructures/set/HSetTest.java:16}	{Class ConstObj at src/test/java/com/williamfiset/algorithms/datastructures/set/HSetTest.java:16}) MOVE({javatests.com.williamfiset.algorithms.datastructures.set.ConstObj}  {com.williamfiset.algorithms.datastructures.set.ConstObj}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class LongestCommonSubstringTest at src/test/java/javatests/com/williamfiset/algorithms/strings/LongestCommonSubstringTest.java:17}	{Class LongestCommonSubstringTest at src/test/java/com/williamfiset/algorithms/strings/LongestCommonSubstringTest.java:17}) MOVE({javatests.com.williamfiset.algorithms.strings.LongestCommonSubstringTest}  {com.williamfiset.algorithms.strings.LongestCommonSubstringTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class HashTableLinearProbingTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/hashtable/HashTableLinearProbingTest.java:9}	{Class HashTableLinearProbingTest at src/test/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableLinearProbingTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.datastructures.hashtable.HashTableLinearProbingTest}  {com.williamfiset.algorithms.datastructures.hashtable.HashTableLinearProbingTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class TreeIsomorphismTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismTest.java:16}	{Class TreeIsomorphismTest at src/test/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismTest.java:16}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismTest}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class MinIndexedBinaryHeapTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/priorityqueue/MinIndexedBinaryHeapTest.java:15}	{Class MinIndexedBinaryHeapTest at src/test/java/com/williamfiset/algorithms/datastructures/priorityqueue/MinIndexedBinaryHeapTest.java:15}) MOVE({javatests.com.williamfiset.algorithms.datastructures.priorityqueue.MinIndexedBinaryHeapTest}  {com.williamfiset.algorithms.datastructures.priorityqueue.MinIndexedBinaryHeapTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class RedBlackTreeTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTreeTest.java:10}	{Class RedBlackTreeTest at src/test/java/com/williamfiset/algorithms/datastructures/balancedtree/RedBlackTreeTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.datastructures.balancedtree.RedBlackTreeTest}  {com.williamfiset.algorithms.datastructures.balancedtree.RedBlackTreeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class DynamicArrayTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/dynamicarray/DynamicArrayTest.java:10}	{Class DynamicArrayTest at src/test/java/com/williamfiset/algorithms/datastructures/dynamicarray/DynamicArrayTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.datastructures.dynamicarray.DynamicArrayTest}  {com.williamfiset.algorithms.datastructures.dynamicarray.DynamicArrayTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class MaxFlowTests at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/networkflow/MaxFlowTests.java:16}	{Class MaxFlowTests at src/test/java/com/williamfiset/algorithms/graphtheory/networkflow/MaxFlowTests.java:16}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.networkflow.MaxFlowTests}  {com.williamfiset.algorithms.graphtheory.networkflow.MaxFlowTests}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class EulerianPathDirectedEdgesAdjacencyListTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyListTest.java:9}	{Class EulerianPathDirectedEdgesAdjacencyListTest at src/test/java/com/williamfiset/algorithms/graphtheory/EulerianPathDirectedEdgesAdjacencyListTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyListTest}  {com.williamfiset.algorithms.graphtheory.EulerianPathDirectedEdgesAdjacencyListTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class HashTableSeparateChainingTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/hashtable/HashTableSeparateChainingTest.java:9}	{Class HashTableSeparateChainingTest at src/test/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableSeparateChainingTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.datastructures.hashtable.HashTableSeparateChainingTest}  {com.williamfiset.algorithms.datastructures.hashtable.HashTableSeparateChainingTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class TreeCenterTest at src/test/java/javatests/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenterTest.java:16}	{Class TreeCenterTest at src/test/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenterTest.java:16}) MOVE({javatests.com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterTest}  {com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class FenwickTreeRangeQueryPointUpdateTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/fenwicktree/FenwickTreeRangeQueryPointUpdateTest.java:10}	{Class FenwickTreeRangeQueryPointUpdateTest at src/test/java/com/williamfiset/algorithms/datastructures/fenwicktree/FenwickTreeRangeQueryPointUpdateTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.datastructures.fenwicktree.FenwickTreeRangeQueryPointUpdateTest}  {com.williamfiset.algorithms.datastructures.fenwicktree.FenwickTreeRangeQueryPointUpdateTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class CoinChangeTest at src/test/java/javatests/com/williamfiset/algorithms/dp/CoinChangeTest.java:11}	{Class CoinChangeTest at src/test/java/com/williamfiset/algorithms/dp/CoinChangeTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.dp.CoinChangeTest}  {com.williamfiset.algorithms.dp.CoinChangeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class SlidingWindowMaximumTest at src/test/java/javatests/com/williamfiset/algorithms/other/SlidingWindowMaximumTest.java:9}	{Class SlidingWindowMaximumTest at src/test/java/com/williamfiset/algorithms/other/SlidingWindowMaximumTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.other.SlidingWindowMaximumTest}  {com.williamfiset.algorithms.other.SlidingWindowMaximumTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class HSetTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/set/HSetTest.java:35}	{Class HSetTest at src/test/java/com/williamfiset/algorithms/datastructures/set/HSetTest.java:35}) MOVE({javatests.com.williamfiset.algorithms.datastructures.set.HSetTest}  {com.williamfiset.algorithms.datastructures.set.HSetTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class QuadTreeTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/quadtree/QuadTreeTest.java:11}	{Class QuadTreeTest at src/test/java/com/williamfiset/algorithms/datastructures/quadtree/QuadTreeTest.java:11}) MOVE({javatests.com.williamfiset.algorithms.datastructures.quadtree.QuadTreeTest}  {com.williamfiset.algorithms.datastructures.quadtree.QuadTreeTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class QueueTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:10}	{Class QueueTest at src/test/java/com/williamfiset/algorithms/datastructures/queue/QueueTest.java:10}) MOVE({javatests.com.williamfiset.algorithms.datastructures.queue.QueueTest}  {com.williamfiset.algorithms.datastructures.queue.QueueTest}),
6e5bc953c2f61761b6dcf1e829af06c135213fa4,MOVE, MOVE	{Class TrieTest at src/test/java/javatests/com/williamfiset/algorithms/datastructures/trie/TrieTest.java:8}	{Class TrieTest at src/test/java/com/williamfiset/algorithms/datastructures/trie/TrieTest.java:8}) MOVE({javatests.com.williamfiset.algorithms.datastructures.trie.TrieTest}  {com.williamfiset.algorithms.datastructures.trie.TrieTest}),
4a49b1a3e306f43d252c54428c09563a46ce61b0,MOVE, MOVE	{Method mult(long  long) at com/williamfiset/algorithms/math/FastFourierTransform.java:34}	{Method mult(long  long) at com/williamfiset/algorithms/math/FastFourierTransform.java:61}) MOVE({com.williamfiset.algorithms.math.FFT mult(long  long)}  {com.williamfiset.algorithms.math.FastFourierTransform mult(long  long)}),
4a49b1a3e306f43d252c54428c09563a46ce61b0,MOVE, MOVE	{Method multiply(long[]  long[]) at com/williamfiset/algorithms/math/FastFourierTransform.java:48}	{Method multiply(long[]  long[]) at com/williamfiset/algorithms/math/FastFourierTransform.java:35}) MOVE({com.williamfiset.algorithms.math.FFT multiply(long[]  long[])}  {com.williamfiset.algorithms.math.FastFourierTransform multiply(long[]  long[])}),
4a49b1a3e306f43d252c54428c09563a46ce61b0,MOVE, MOVE	{Method transform(long[]  int  boolean) at com/williamfiset/algorithms/math/FastFourierTransform.java:74}	{Method transform(long[]  int  boolean) at com/williamfiset/algorithms/math/FastFourierTransform.java:74}) MOVE({com.williamfiset.algorithms.math.FFT transform(long[]  int  boolean)}  {com.williamfiset.algorithms.math.FastFourierTransform transform(long[]  int  boolean)}),
f04038cbbfb3686343fd8d7b358d5e85f29507a1,RENAME, RENAME	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:127}	{Method initializeEmptyFlowGraph() at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:158}) RENAME({NetworkFlowSolverBase initializeGraph()}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.MiceAndOwls NetworkFlowSolverBase initializeEmptyFlowGraph()}),
f04038cbbfb3686343fd8d7b358d5e85f29507a1,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:203}	{Method augment(long) at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:103}) EXTRACT_MOVE({FordFulkersonDfsSolverAdjacencyList dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.MiceAndOwls Edge augment(long)}),
f04038cbbfb3686343fd8d7b358d5e85f29507a1,RENAME, RENAME	{Class FordFulkersonDfsSolverAdjacencyList at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:178}	{Class FordFulkersonDfsSolver at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:211}) RENAME({FordFulkersonDfsSolverAdjacencyList}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.MiceAndOwls FordFulkersonDfsSolver}),
f04038cbbfb3686343fd8d7b358d5e85f29507a1,MOVE, MOVE	{Class MiceAndOwls at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:4}	{Class MiceAndOwls at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:16}) MOVE({MiceAndOwls}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.MiceAndOwls}),
f04038cbbfb3686343fd8d7b358d5e85f29507a1,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:203}	{Method remainingCapacity() at com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java:99}) EXTRACT_MOVE({FordFulkersonDfsSolverAdjacencyList dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.MiceAndOwls Edge remainingCapacity()}),
283fb5a46b314013f6d2b96f7afde718696fa243,EXTRACT, EXTRACT	{Method testMatchingAndCostAreConsistent() at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:370}	{Method assertOptimalMatching(int[]  Double[][]  double) at src/test/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingTest.java:442}) EXTRACT({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest testMatchingAndCostAreConsistent()}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingTest assertOptimalMatching(int[]  Double[][]  double)}),
f8dc49d8867bfe254fa4b7d4f70b29079d97be8b,RENAME, RENAME	{Method gcf(long  long) at Math/PrimeFactorization.java:46}	{Method gcd(long  long) at Math/PrimeFactorization.java:46}) RENAME({PrimeFactorization gcf(long  long)}  {PrimeFactorization gcd(long  long)}),
5cd254a8bc3d3d186a214615bd64f6ae0e841d21,RENAME, RENAME	{Method TSP(int  int  double[][]  Double[][]) at GraphTheory/TspDynamicProgramming.java:151}	{Method tsp(int  int  double[][]  Double[][]  Integer[][]  int) at GraphTheory/TspDynamicProgramming.java:81}) RENAME({TspDynamicProgramming TSP(int  int  double[][]  Double[][])}  {TspDynamicProgramming tsp(int  int  double[][]  Double[][]  Integer[][]  int)}),
ca38f55f8ade816cbaad366a256e33a2b3d197cc,MOVE_RENAME, MOVE_RENAME	{Method exch(int  int) at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:359}	{Method swap(int  int) at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:295}) MOVE_RENAME({com.williamfiset.algorithms.graphtheory.IndexMinPQ exch(int  int)}  {com.williamfiset.algorithms.graphtheory.MinIndexedDHeap swap(int  int)}),
b7526e40a65e6bb15e1732a21f384b31081d81f2,MOVE, MOVE	{Method mcbm(List  int  int) at GraphTheory/MaxMatchingBipartiteGraphAugmentingPath.java:10}	{Method mcbm(List  int  int) at GraphTheory/MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList.java:25}) MOVE({MaxMatchingBipartiteGraphAugmentingPath mcbm(List  int  int)}  {MaximumCardinalityBipartiteMatchingAugmentingPathAdjacencyList mcbm(List  int  int)}),
5f015104677d47fc04d88e1ebfeb7da5bd9489d2,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method minQuery(long[]  int  int  long) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:22}	{Method minQuery(long[]  int  int  long  int) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:23}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest minQuery(long[]  int  int  long)}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest minQuery(long[]  int  int  long  int)}),
5f015104677d47fc04d88e1ebfeb7da5bd9489d2,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method queryResultTest(long[]  int  int  long  SparseTable.Operation) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:10}	{Method queryResultTest(long[]  int  int  long  int  SparseTable.Operation) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:10}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest queryResultTest(long[]  int  int  long  SparseTable.Operation)}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest queryResultTest(long[]  int  int  long  int  SparseTable.Operation)}),
5f015104677d47fc04d88e1ebfeb7da5bd9489d2,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method maxQuery(long[]  int  int  long) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:28}	{Method maxQuery(long[]  int  int  long  int) at src/test/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTableTest.java:30}) CHANGE_SIGNATURE({com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest maxQuery(long[]  int  int  long)}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTableTest maxQuery(long[]  int  int  long  int)}),
65cb0252da853ca5c0bba83fd6205b6aa0932091,RENAME, RENAME	{Method f(int  Double[]  int[]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:128}	{Method ff(int  Double[]  int[]) at src/main/java/com/williamfiset/algorithms/dp/WeightedMaximumCardinalityMatchingRecursive.java:187}) RENAME({com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive f(int  Double[]  int[])}  {com.williamfiset.algorithms.dp.WeightedMaximumCardinalityMatchingRecursive ff(int  Double[]  int[])}),
2479af24a23bd08502b91ca70f369d500df82dde,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method new(int  int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowWithBellmanFord.java:19}	{Method new(int  int  long  long) at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowWithBellmanFord.java:22}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowWithBellmanFord Edge new(int  int  int  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowWithBellmanFord Edge new(int  int  long  long)}),
8f46ecfb77f2927eb6e2d7424a55089d97baf6d3,RENAME, RENAME	{Class CombinationsWithRepitition at ConstructiveAlgorithms/CombinationsWithRepitition.java:1}	{Class CombinationsWithRepetition at ConstructiveAlgorithms/CombinationsWithRepetition.java:1}) RENAME({CombinationsWithRepitition}  {CombinationsWithRepetition}),
9f9c53d9ebddee6113aa5eef4ce5412ca6208672,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method addEdge(int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:62}	{Method addEdge(int  int  long) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:76}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase addEdge(int  int  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase addEdge(int  int  long)}),
9f9c53d9ebddee6113aa5eef4ce5412ca6208672,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method addEdge(int  int  int) at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:32}	{Method addEdge(int  int  long) at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:32}) CHANGE_SIGNATURE({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList addEdge(int  int  int)}  {com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList addEdge(int  int  long)}),
9f9c53d9ebddee6113aa5eef4ce5412ca6208672,PULL_UP, PULL_UP	{Method getMinCost() at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowWithBellmanFord.java:97}	{Method getMinCost() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:121}) PULL_UP({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowWithBellmanFord getMinCost()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase getMinCost()}),
9dc7a545784f1ddcc35eeaf5f4f36b1966dc53ba,MOVE, MOVE	{Class BoyerMooreStringSearchTest at src/test/java/com/williamfiset/algorithms/strings/BoyerMooreStringSearchTest.java:9}	{Class BoyerMooreStringSearchTest at src/test/java/com/williamfiset/algorithms/strings/BoyerMooreStringSearchTest.java:9}) MOVE({javatests.com.williamfiset.algorithms.strings.BoyerMooreStringSearchTest}  {com.williamfiset.algorithms.strings.BoyerMooreStringSearchTest}),
2a1367fee9aca9a7dac889a68969733e16d7bd2f,RENAME, RENAME	{Class MinCostMaxFlowSolver at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:18}	{Class MinCostMaxFlow at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlow.java:18}) RENAME({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowSolver}  {com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlow}),
152dfc0d17f399a360ac59b3502c6218a11a0a84,EXTRACT, EXTRACT	{Method main(String[]) at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java:193}	{Method example3() at src/main/java/com/williamfiset/algorithms/datastructures/sparsetable/SparseTable.java:229}) EXTRACT({com.williamfiset.algorithms.datastructures.sparsetable.SparseTable main(String[])}  {com.williamfiset.algorithms.datastructures.sparsetable.SparseTable example3()}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:48}	{Method visit(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:124}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visit(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method bfs() at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:46}	{Method visited(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:129}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyList bfs()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visited(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:48}	{Method visited(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:129}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visited(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:33}	{Method markAllNodesAsUnvisited() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:135}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase markAllNodesAsUnvisited()}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method bfs() at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:46}	{Method visit(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:124}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyList bfs()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visit(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:32}	{Method markAllNodesAsUnvisited() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:135}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase markAllNodesAsUnvisited()}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java:32}	{Method visited(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:129}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visited(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:71}	{Method visit(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:124}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visit(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:48}	{Method visited(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:129}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visited(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method dfs(int  long) at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:71}	{Method visited(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:129}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList dfs(int  long)}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visited(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java:33}	{Method visited(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:129}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDfsSolverAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visited(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method getAugmentingPath() at com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowJohnsons.java:91}	{Method visit(int) at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:124}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.MinCostMaxFlowJohnsons getAugmentingPath()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase visit(int)}),
1dcc2d10addae7700b843c69b4dc37e7f2bda745,EXTRACT_MOVE, EXTRACT_MOVE	{Method solve() at com/williamfiset/algorithms/graphtheory/networkflow/CapacityScalingSolverAdjacencyList.java:48}	{Method markAllNodesAsUnvisited() at com/williamfiset/algorithms/graphtheory/networkflow/NetworkFlowSolverBase.java:135}) EXTRACT_MOVE({com.williamfiset.algorithms.graphtheory.networkflow.CapacityScalingSolverAdjacencyList solve()}  {com.williamfiset.algorithms.graphtheory.networkflow.NetworkFlowSolverBase markAllNodesAsUnvisited()}),
c19f7fdd963dd1da42a4c6bea2a760c33de6609b,RENAME, RENAME	{Method initializeGraph() at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:90}	{Method initializeEmptyFlowGraph() at com/williamfiset/algorithms/graphtheory/networkflow/examples/FordFulkersonExample.java:90}) RENAME({com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample NetworkFlowSolverBase initializeGraph()}  {com.williamfiset.algorithms.graphtheory.networkflow.examples.FordFulkersonExample NetworkFlowSolverBase initializeEmptyFlowGraph()}),
57605b910a6ea802c7d21a78a00e5aae2bb9f2f3,MOVE, MOVE	{Class MagicalCows at src/main/java/com/williamfiset/algorithms/dp/examples/magicalcows/MagicalCows.java:18}	{Class MagicalCows at src/main/java/com/williamfiset/algorithms/dp/examples/magicalcows/MagicalCows.java:20}) MOVE({MagicalCows}  {com.williamfiset.algorithms.dp.examples.magicalcows.MagicalCows}),
57605b910a6ea802c7d21a78a00e5aae2bb9f2f3,MOVE, MOVE	{Class HouseRobber at src/main/java/com/williamfiset/algorithms/dp/examples/houserobber/HouseRobber.java:21}	{Class HouseRobber at src/main/java/com/williamfiset/algorithms/dp/examples/houserobber/HouseRobber.java:21}) MOVE({com.williamfiset.algorithms.dp.examples.HouseRobber}  {com.williamfiset.algorithms.dp.examples.houserobber.HouseRobber}),
57605b910a6ea802c7d21a78a00e5aae2bb9f2f3,MOVE, MOVE	{Class BoardTilingsSolver at src/main/java/com/williamfiset/algorithms/dp/examples/boardtilings/BoardTilingsSolver.java:3}	{Class BoardTilingsSolver at src/main/java/com/williamfiset/algorithms/dp/examples/boardtilings/BoardTilingsSolver.java:5}) MOVE({BoardTilingsSolver}  {com.williamfiset.algorithms.dp.examples.boardtilings.BoardTilingsSolver}),
57605b910a6ea802c7d21a78a00e5aae2bb9f2f3,MOVE, MOVE	{Class Scenes at src/main/java/com/williamfiset/algorithms/dp/examples/scenes/Scenes.java:9}	{Class Scenes at src/main/java/com/williamfiset/algorithms/dp/examples/scenes/Scenes.java:11}) MOVE({Scenes}  {com.williamfiset.algorithms.dp.examples.scenes.Scenes}),
57605b910a6ea802c7d21a78a00e5aae2bb9f2f3,MOVE, MOVE	{Class TilingDominoes at src/main/java/com/williamfiset/algorithms/dp/examples/tilingdominoes/TilingDominoes.java:10}	{Class TilingDominoes at src/main/java/com/williamfiset/algorithms/dp/examples/tilingdominoes/TilingDominoes.java:12}) MOVE({TilingDominoes}  {com.williamfiset.algorithms.dp.examples.tilingdominoes.TilingDominoes}),
57605b910a6ea802c7d21a78a00e5aae2bb9f2f3,MOVE, MOVE	{Class NarrowArtGalleryRecursive at src/main/java/com/williamfiset/algorithms/dp/examples/narrowartgallery/NarrowArtGalleryRecursive.java:12}	{Class NarrowArtGalleryRecursive at src/main/java/com/williamfiset/algorithms/dp/examples/narrowartgallery/NarrowArtGalleryRecursive.java:14}) MOVE({NarrowArtGalleryRecursive}  {com.williamfiset.algorithms.dp.examples.narrowartgallery.NarrowArtGalleryRecursive}),
57605b910a6ea802c7d21a78a00e5aae2bb9f2f3,MOVE, MOVE	{Class EditDistance at src/main/java/com/williamfiset/algorithms/dp/examples/editdistance/EditDistance.java:4}	{Class EditDistance at src/main/java/com/williamfiset/algorithms/dp/examples/editdistance/EditDistance.java:6}) MOVE({EditDistance}  {com.williamfiset.algorithms.dp.examples.editdistance.EditDistance}),
5e38215b7b49b8412142d72ba5f5e1d9607c3b44,MOVE, MOVE	{Class MinIndexedDHeap at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:134}	{Class MinIndexedDHeap at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:171}) MOVE({com.williamfiset.algorithms.graphtheory.MinIndexedDHeap}  {com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList MinIndexedDHeap}),
5e38215b7b49b8412142d72ba5f5e1d9607c3b44,EXTRACT, EXTRACT	{Method getMstCost() at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:56}	{Method solve() at com/williamfiset/algorithms/graphtheory/EagerPrimsAdjacencyList.java:70}) EXTRACT({com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList getMstCost()}  {com.williamfiset.algorithms.graphtheory.EagerPrimsAdjacencyList solve()}),
5e38215b7b49b8412142d72ba5f5e1d9607c3b44,MOVE, MOVE	{Class MinIndexedDHeap at com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyListWithDHeap.java:160}	{Class MinIndexedDHeap at com/williamfiset/algorithms/graphtheory/DijkstrasShortestPathAdjacencyListWithDHeap.java:158}) MOVE({com.williamfiset.algorithms.graphtheory.MinIndexedDHeap}  {com.williamfiset.algorithms.graphtheory.DijkstrasShortestPathAdjacencyListWithDHeap MinIndexedDHeap}),
c7d4d60edcb8998267f8aa2ac5a43a87c6dfff97,MOVE, MOVE	{Class EdmondsKarpAdjacencyListOptimized at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyListOptimized.java:15}	{Class EdmondsKarpAdjacencyListOptimized at com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyListOptimized.java:15}) MOVE({com.williamfiset.algorithms.graphtheory.EdmondsKarpAdjacencyListOptimized}  {com.williamfiset.algorithms.graphtheory.networkflow.EdmondsKarpAdjacencyListOptimized}),
c7d4d60edcb8998267f8aa2ac5a43a87c6dfff97,MOVE, MOVE	{Class FordFulkersonDFSAdjacencyMatrix at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyMatrix.java:13}	{Class FordFulkersonDFSAdjacencyMatrix at com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDFSAdjacencyMatrix.java:13}) MOVE({com.williamfiset.algorithms.graphtheory.FordFulkersonDFSAdjacencyMatrix}  {com.williamfiset.algorithms.graphtheory.networkflow.FordFulkersonDFSAdjacencyMatrix}),
4175ad67c9048d9aef5bfa7bcbdffd016516badc,CHANGE_SIGNATURE, CHANGE_SIGNATURE	{Method findBridges(List  int) at GraphTheory/BridgesAdjacencyList.java:21}	{Method findBridges() at GraphTheory/BridgesAdjacencyList.java:22}) CHANGE_SIGNATURE({BridgesAdjacencyList findBridges(List  int)}  {BridgesAdjacencyList findBridges()}),
cd60b805aa117460388dd0902a8bce11017ada39,RENAME, RENAME	{Class DeterminantLaplaceExpansion at LinearAlgebra/DeterminantLaplaceExpansion.java:1}	{Class MatrixDeterminantLaplaceExpansion at LinearAlgebra/MatrixDeterminantLaplaceExpansion.java:1}) RENAME({DeterminantLaplaceExpansion}  {MatrixDeterminantLaplaceExpansion}),
